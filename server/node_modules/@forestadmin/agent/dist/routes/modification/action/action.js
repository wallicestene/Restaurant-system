"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const action_authorization_1 = __importDefault(require("./action-authorization"));
const types_1 = require("../../../types");
const body_parser_1 = __importDefault(require("../../../utils/body-parser"));
const context_filter_factory_1 = __importDefault(require("../../../utils/context-filter-factory"));
const action_values_1 = __importDefault(require("../../../utils/forest-schema/action-values"));
const generator_actions_1 = __importDefault(require("../../../utils/forest-schema/generator-actions"));
const id_1 = __importDefault(require("../../../utils/id"));
const query_string_1 = __importDefault(require("../../../utils/query-string"));
const collection_route_1 = __importDefault(require("../../collection-route"));
class ActionRoute extends collection_route_1.default {
    constructor(services, options, dataSource, collectionName, actionName) {
        super(services, options, dataSource, collectionName);
        this.actionName = actionName;
        this.actionAuthorizationService = new action_authorization_1.default(options.forestAdminClient);
    }
    setupRoutes(router) {
        // Generate url that matches the declaration in forest-schema/generator-actions.ts
        const actionIndex = Object.keys(this.collection.schema.actions).indexOf(this.actionName);
        const slug = generator_actions_1.default.getActionSlug(this.actionName);
        const path = `/_actions/${this.collection.name}/${actionIndex}/${slug}`;
        router.post(`${path}`, this.middlewareCustomActionApprovalRequestData.bind(this), this.handleExecute.bind(this));
        router.post(`${path}/hooks/load`, this.handleHook.bind(this));
        router.post(`${path}/hooks/change`, this.handleHook.bind(this));
        router.post(`${path}/hooks/search`, this.handleHook.bind(this));
    }
    async handleExecute(context) {
        const { dataSource } = this.collection;
        const caller = query_string_1.default.parseCaller(context);
        const [filterForCaller, filterForAllCaller] = await Promise.all([
            this.getRecordSelection(context),
            this.getRecordSelection(context, false),
        ]);
        const requestBody = context.request.body;
        const canPerformCustomActionParams = {
            caller,
            customActionName: this.actionName,
            collection: this.collection,
            filterForCaller,
            filterForAllCaller,
        };
        if (requestBody?.data?.attributes?.requester_id) {
            await this.actionAuthorizationService.assertCanApproveCustomAction({
                ...canPerformCustomActionParams,
                requesterId: requestBody.data.attributes.requester_id,
            });
        }
        else {
            await this.actionAuthorizationService.assertCanTriggerCustomAction(canPerformCustomActionParams);
        }
        const rawData = requestBody.data.attributes.values;
        // As forms are dynamic, we don't have any way to ensure that we're parsing the data correctly
        // => better send invalid data to the getForm() customer handler than to the execute() one.
        const unsafeData = action_values_1.default.makeFormDataUnsafe(rawData);
        const fields = await this.collection.getForm(caller, this.actionName, unsafeData, filterForCaller);
        // Now that we have the field list, we can parse the data again.
        const data = action_values_1.default.makeFormData(dataSource, rawData, fields);
        const result = await this.collection.execute(caller, this.actionName, data, filterForCaller);
        if (result?.type === 'Error') {
            context.response.status = types_1.HttpCode.BadRequest;
            context.response.body = { error: result.message, html: result.html };
        }
        else if (result?.type === 'Success') {
            context.response.body = {
                success: result.message,
                html: result.html,
                refresh: { relationships: [...result.invalidated] },
            };
        }
        else if (result?.type === 'Webhook') {
            const { url, method, headers, body } = result;
            context.response.body = { webhook: { url, method, headers, body } };
        }
        else if (result?.type === 'Redirect') {
            context.response.body = { redirectTo: result.path };
        }
        else if (result?.type === 'File') {
            context.response.attachment(result.name);
            context.response.set('Access-Control-Expose-Headers', 'Content-Disposition');
            context.response.type = result.mimeType;
            context.response.body = result.stream;
        }
        else {
            throw new Error('Unexpected Action result.');
        }
    }
    async handleHook(context) {
        const body = context.request.body;
        const { id: userId } = context.state.user;
        await this.actionAuthorizationService.assertCanRequestCustomActionParameters({
            userId,
            customActionName: this.actionName,
            collectionName: this.collection.name,
        });
        const { dataSource } = this.collection;
        const forestFields = body.data.attributes.fields;
        const data = forestFields
            ? action_values_1.default.makeFormDataFromFields(dataSource, forestFields)
            : null;
        const caller = query_string_1.default.parseCaller(context);
        const filter = await this.getRecordSelection(context);
        const fields = await this.collection.getForm(caller, this.actionName, data, filter, {
            changedField: body.data.attributes.changed_field,
            searchField: body.data.attributes.search_field,
            searchValue: body.data.attributes.search_value,
        });
        context.response.body = {
            fields: fields.map(field => generator_actions_1.default.buildFieldSchema(this.collection.dataSource, field)),
        };
    }
    async middlewareCustomActionApprovalRequestData(context, next) {
        const requestBody = context.request.body;
        // We forbid requester_id from default request as it's only retrieved from
        // signed_approval_request
        if (requestBody?.data?.attributes?.requester_id) {
            throw new datasource_toolkit_1.UnprocessableError();
        }
        if (requestBody?.data?.attributes?.signed_approval_request) {
            const signedParameters = this.options.forestAdminClient.verifySignedActionParameters(requestBody.data.attributes.signed_approval_request);
            context.request.body = signedParameters;
        }
        return next();
    }
    async getRecordSelection(context, includeUserScope = true) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const body = context.request.body;
        const attributes = body?.data?.attributes;
        // Match user filter + search + scope? + segment.
        const scope = includeUserScope
            ? await this.services.authorization.getScope(this.collection, context)
            : null;
        let filter = context_filter_factory_1.default.build(this.collection, context, scope);
        // Restrict the filter to the selected records for single or bulk actions.
        if (this.collection.schema.actions[this.actionName].scope !== 'Global') {
            const selectionIds = body_parser_1.default.parseSelectionIds(this.collection.schema, context);
            let selectedIds = datasource_toolkit_1.ConditionTreeFactory.matchIds(this.collection.schema, selectionIds.ids);
            if (selectionIds.areExcluded)
                selectedIds = selectedIds.inverse();
            filter = filter.override({
                conditionTree: datasource_toolkit_1.ConditionTreeFactory.intersect(filter.conditionTree, selectedIds),
            });
        }
        // Restrict the filter further for the "related data" page.
        if (attributes?.parent_association_name) {
            const caller = query_string_1.default.parseCaller(context);
            const relation = attributes?.parent_association_name;
            const parent = this.dataSource.getCollection(attributes.parent_collection_name);
            const parentId = id_1.default.unpackId(parent.schema, attributes.parent_collection_id);
            filter = await datasource_toolkit_1.FilterFactory.makeForeignFilter(parent, parentId, relation, caller, filter);
        }
        return filter;
    }
}
exports.default = ActionRoute;
//# sourceMappingURL=data:application/json;base64,