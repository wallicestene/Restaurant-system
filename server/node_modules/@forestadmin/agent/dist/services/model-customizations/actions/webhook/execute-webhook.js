"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const superagent_1 = __importDefault(require("superagent"));
function generateBody(action, records) {
    const commonPart = {
        action: {
            name: action.name,
            scope: action.configuration.scope.toLocaleLowerCase(),
        },
    };
    switch (action.configuration.scope) {
        case 'Global':
        case 'Bulk':
            return {
                ...commonPart,
                records,
            };
        case 'Single':
            if (records.length !== 1) {
                throw new Error('Single actions can only be used with one selected record');
            }
            return {
                ...commonPart,
                record: records[0],
            };
        default:
            throw new Error(`Unknown scope: ${action.configuration.scope}`);
    }
}
async function executeWebhook(action, context) {
    const primaryKeys = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(context.collection.schema);
    const records = await context.getRecords(primaryKeys);
    const body = generateBody(action, records);
    try {
        await superagent_1.default.post(action.configuration.configuration.url).send(body);
    }
    catch (e) {
        if (e.response) {
            return {
                type: 'Error',
                message: `Error received from the webhook endpoint: ${e.status} ${e.message}.`,
            };
        }
        return {
            type: 'Error',
            message: `Could not execute the action: ${e.message}.`,
        };
    }
}
exports.default = executeWebhook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS13ZWJob29rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL21vZGVsLWN1c3RvbWl6YXRpb25zL2FjdGlvbnMvd2ViaG9vay9leGVjdXRlLXdlYmhvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSx3RUFBNEU7QUFFNUUsNERBQXVEO0FBRXZELFNBQVMsWUFBWSxDQUNuQixNQUFxQixFQUNyQixPQUE0QztJQUU1QyxNQUFNLFVBQVUsR0FBRztRQUNqQixNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDakIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFO1NBQ3REO0tBQ0YsQ0FBQztJQUVGLFFBQVEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUU7UUFDbEMsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLE1BQU07WUFDVCxPQUFPO2dCQUNMLEdBQUcsVUFBVTtnQkFDYixPQUFPO2FBQ1IsQ0FBQztRQUNKLEtBQUssUUFBUTtZQUNYLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQzthQUM3RTtZQUVELE9BQU87Z0JBQ0wsR0FBRyxVQUFVO2dCQUNiLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ25CLENBQUM7UUFDSjtZQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNuRTtBQUNILENBQUM7QUFFYyxLQUFLLFVBQVUsY0FBYyxDQUMxQyxNQUFxQixFQUNyQixPQUF5QjtJQUV6QixNQUFNLFdBQVcsR0FBRyxnQ0FBVyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FHckUsQ0FBQztJQUVKLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUV0RCxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTNDLElBQUk7UUFDRixNQUFNLG9CQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxRTtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsSUFBSyxDQUFtQixDQUFDLFFBQVEsRUFBRTtZQUNqQyxPQUFPO2dCQUNMLElBQUksRUFBRSxPQUFPO2dCQUNiLE9BQU8sRUFBRSw2Q0FBNkMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHO2FBQy9FLENBQUM7U0FDSDtRQUVELE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDLE9BQU8sR0FBRztTQUN2RCxDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBNUJELGlDQTRCQyJ9