"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const filterable_1 = __importDefault(require("./filterable"));
const validation_1 = __importDefault(require("./validation"));
class SchemaGeneratorFields {
    static buildSchema(collection, name) {
        const { type } = collection.schema.fields[name];
        let schema;
        switch (type) {
            case 'Column':
                schema = SchemaGeneratorFields.buildColumnSchema(collection, name);
                break;
            case 'ManyToOne':
            case 'OneToMany':
            case 'ManyToMany':
            case 'OneToOne':
                schema = SchemaGeneratorFields.buildRelationSchema(collection, name);
                break;
            default:
                throw new Error('Invalid field type');
        }
        return Object.entries(schema)
            .sort()
            .reduce((sortedSchema, [key, value]) => {
            sortedSchema[key] = value;
            return sortedSchema;
        }, {});
    }
    static buildColumnSchema(collection, name) {
        const column = collection.schema.fields[name];
        const isForeignKey = datasource_toolkit_1.SchemaUtils.isForeignKey(collection.schema, name);
        return {
            defaultValue: column.defaultValue ?? null,
            enums: [...(column.enumValues ?? [])].sort() ?? null,
            field: name,
            integration: null,
            inverseOf: null,
            isFilterable: filterable_1.default.isFilterable(column.columnType, column.filterOperators),
            isPrimaryKey: Boolean(column.isPrimaryKey),
            // When a column is a foreign key, it is readonly.
            // This may sound counter-intuitive: it is so that the user don't have two fields which
            // allow updating the same foreign key in the detail-view form (fk + many to one)
            isReadOnly: isForeignKey || Boolean(column.isReadOnly),
            isRequired: column.validation?.some(v => v.operator === 'Present') ?? false,
            isSortable: Boolean(column.isSortable),
            isVirtual: false,
            reference: null,
            type: this.convertColumnType(column.columnType),
            validations: validation_1.default.convertValidationList(column),
        };
    }
    static convertColumnType(type) {
        if (typeof type === 'string')
            return type;
        if (Array.isArray(type)) {
            return [this.convertColumnType(type[0])];
        }
        return {
            fields: Object.entries(type).map(([key, subType]) => ({
                field: key,
                type: this.convertColumnType(subType),
            })),
        };
    }
    static buildToManyRelationSchema(relation, collection, foreignCollection, baseSchema) {
        let targetName;
        let targetField;
        let isReadOnly;
        if (relation.type === 'OneToMany') {
            targetName = relation.originKeyTarget;
            targetField = collection.schema.fields[targetName];
            const originKey = foreignCollection.schema.fields[relation.originKey];
            isReadOnly = originKey.isReadOnly;
        }
        else {
            targetName = relation.foreignKeyTarget;
            targetField = foreignCollection.schema.fields[targetName];
            const throughSchema = collection.dataSource.getCollection(relation.throughCollection).schema;
            const foreignKey = throughSchema.fields[relation.foreignKey];
            const originKey = throughSchema.fields[relation.originKey];
            isReadOnly = originKey.isReadOnly || foreignKey.isReadOnly;
        }
        return {
            ...baseSchema,
            type: [targetField.columnType],
            defaultValue: null,
            isFilterable: false,
            isPrimaryKey: false,
            isRequired: false,
            isReadOnly: Boolean(isReadOnly),
            isSortable: true,
            validations: [],
            reference: `${foreignCollection.name}.${targetName}`,
        };
    }
    static isForeignCollectionFilterable(foreignCollection) {
        return Object.values(foreignCollection.schema.fields).some(field => field.type === 'Column' &&
            filterable_1.default.isFilterable(field.columnType, field.filterOperators));
    }
    static buildOneToOneSchema(relation, collection, foreignCollection, baseSchema) {
        const targetField = collection.schema.fields[relation.originKeyTarget];
        const keyField = foreignCollection.schema.fields[relation.originKey];
        return {
            ...baseSchema,
            type: keyField.columnType,
            defaultValue: null,
            isFilterable: SchemaGeneratorFields.isForeignCollectionFilterable(foreignCollection),
            isPrimaryKey: false,
            isRequired: false,
            isReadOnly: Boolean(keyField.isReadOnly),
            isSortable: Boolean(targetField.isSortable),
            validations: [],
            reference: `${foreignCollection.name}.${relation.originKeyTarget}`,
        };
    }
    static buildManyToOneSchema(relation, collection, foreignCollection, baseSchema) {
        const keyField = collection.schema.fields[relation.foreignKey];
        return {
            ...baseSchema,
            type: keyField.columnType,
            defaultValue: keyField.defaultValue ?? null,
            isFilterable: SchemaGeneratorFields.isForeignCollectionFilterable(foreignCollection),
            // Always set false even if the foreign key is the primary key.
            // Doing otherwise breaks the frontend when no reference field is set.
            isPrimaryKey: false,
            isRequired: keyField.validation?.some(v => v.operator === 'Present') ?? false,
            isReadOnly: Boolean(keyField.isReadOnly),
            isSortable: Boolean(keyField.isSortable),
            validations: validation_1.default.convertValidationList(keyField),
            reference: `${foreignCollection.name}.${relation.foreignKeyTarget}`,
        };
    }
    static buildRelationSchema(collection, name) {
        const relation = collection.schema.fields[name];
        const foreignCollection = collection.dataSource.getCollection(relation.foreignCollection);
        const relationSchema = {
            field: name,
            enums: null,
            integration: null,
            isVirtual: false,
            inverseOf: datasource_toolkit_1.CollectionUtils.getInverseRelation(collection, name),
            relationship: SchemaGeneratorFields.relationMap[relation.type],
        };
        switch (relation.type) {
            case 'ManyToMany':
            case 'OneToMany':
                return SchemaGeneratorFields.buildToManyRelationSchema(relation, collection, foreignCollection, relationSchema);
            case 'OneToOne':
                return SchemaGeneratorFields.buildOneToOneSchema(relation, collection, foreignCollection, relationSchema);
            default:
                return SchemaGeneratorFields.buildManyToOneSchema(relation, collection, foreignCollection, relationSchema);
        }
    }
}
exports.default = SchemaGeneratorFields;
SchemaGeneratorFields.relationMap = {
    ManyToMany: 'BelongsToMany',
    ManyToOne: 'BelongsTo',
    OneToMany: 'HasMany',
    OneToOne: 'HasOne',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLWZpZWxkcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9mb3Jlc3Qtc2NoZW1hL2dlbmVyYXRvci1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFheUM7QUFHekMsOERBQW1EO0FBQ25ELDhEQUFtRDtBQUVuRCxNQUFxQixxQkFBcUI7SUFReEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFzQixFQUFFLElBQVk7UUFDckQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhELElBQUksTUFBeUIsQ0FBQztRQUU5QixRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssUUFBUTtnQkFDWCxNQUFNLEdBQUcscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNuRSxNQUFNO1lBRVIsS0FBSyxXQUFXLENBQUM7WUFDakIsS0FBSyxXQUFXLENBQUM7WUFDakIsS0FBSyxZQUFZLENBQUM7WUFDbEIsS0FBSyxVQUFVO2dCQUNiLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3JFLE1BQU07WUFFUjtnQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDekM7UUFFRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2FBQzFCLElBQUksRUFBRTthQUNOLE1BQU0sQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3JDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFFMUIsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVP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