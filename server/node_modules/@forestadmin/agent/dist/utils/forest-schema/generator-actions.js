"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const path_1 = __importDefault(require("path"));
const action_fields_1 = __importDefault(require("./action-fields"));
const action_values_1 = __importDefault(require("./action-values"));
const generator_action_field_widget_1 = __importDefault(require("./generator-action-field-widget"));
class SchemaGeneratorActions {
    static getActionSlug(name) {
        return name.toLocaleLowerCase().replace(/[^a-z0-9-]+/g, '-');
    }
    static async buildSchema(collection, name) {
        const schema = collection.schema.actions[name];
        const actionIndex = Object.keys(collection.schema.actions).indexOf(name);
        // Generate url-safe friendly name (which won't be unique, but that's OK).
        const slug = SchemaGeneratorActions.getActionSlug(name);
        const fields = await SchemaGeneratorActions.buildFields(collection, name, schema);
        return {
            id: `${collection.name}-${actionIndex}-${slug}`,
            name,
            type: schema.scope.toLowerCase(),
            baseUrl: null,
            endpoint: path_1.default.posix.join('/forest/_actions', collection.name, String(actionIndex), slug),
            httpMethod: 'POST',
            redirect: null,
            download: Boolean(schema.generateFile),
            fields,
            hooks: {
                load: !schema.staticForm,
                // Always registering the change hook has no consequences, even if we don't use it.
                change: ['changeHook'],
            },
        };
    }
    /** Build schema for given field */
    static buildFieldSchema(dataSource, field) {
        const { label, description, isRequired, isReadOnly, watchChanges, type } = field;
        const output = { description, isRequired, isReadOnly };
        output.field = label;
        output.value = action_values_1.default.valueToForest(field, field.value);
        if (watchChanges)
            output.hook = 'changeHook';
        if (action_fields_1.default.isCollectionField(field)) {
            const collection = dataSource.getCollection(field.collectionName);
            const [pk] = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(collection.schema);
            const pkSchema = collection.schema.fields[pk];
            output.type = pkSchema.columnType;
            output.reference = `${collection.name}.${pk}`;
        }
        else if (type.endsWith('List')) {
            output.type = [type.substring(0, type.length - 4)];
        }
        else {
            output.type = type;
        }
        if (action_fields_1.default.isEnumField(field) || action_fields_1.default.isEnumListField(field)) {
            output.enums = field.enumValues;
        }
        output.widgetEdit = generator_action_field_widget_1.default.buildWidgetOptions(field);
        return output;
    }
    static async buildFields(collection, name, schema) {
        // We want the schema to be generated on usage => send dummy schema
        if (!schema.staticForm) {
            return SchemaGeneratorActions.defaultFields;
        }
        // Ask the action to generate a form
        const fields = await collection.getForm(null, name);
        if (fields) {
            // When sending to server, we need to rename 'value' into 'defaultValue'
            // otherwise, it does not gets applied 🤷‍♂️
            return fields.map(field => {
                const newField = SchemaGeneratorActions.buildFieldSchema(collection.dataSource, field);
                newField.defaultValue = newField.value;
                delete newField.value;
                return newField;
            });
        }
        return [];
    }
}
exports.default = SchemaGeneratorActions;
/**
 * 'fields' sent to forestadmin-server when we want to generate the form on demand.
 * This works around a bug in frontend which won't call the server if no fields are defined.
 */
SchemaGeneratorActions.defaultFields = [
    {
        field: 'Loading...',
        type: 'String',
        isReadOnly: true,
        defaultValue: 'Form is loading',
        value: undefined,
        description: '',
        enums: null,
        hook: null,
        isRequired: false,
        reference: null,
        widgetEdit: null,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLWFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvZm9yZXN0LXNjaGVtYS9nZW5lcmF0b3ItYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdFQVF5QztBQUV6QyxnREFBd0I7QUFFeEIsb0VBQTJDO0FBQzNDLG9FQUFtRDtBQUNuRCxvR0FBeUU7QUFFekUsTUFBcUIsc0JBQXNCO0lBcUJ6QyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQVk7UUFDL0IsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxVQUFzQixFQUFFLElBQVk7UUFDM0QsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6RSwwRUFBMEU7UUFDMUUsTUFBTSxJQUFJLEdBQUcsc0JBQXNCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hELE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQXNCLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFbEYsT0FBTztZQUNMLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxJQUFJLElBQUksV0FBVyxJQUFJLElBQUksRUFBRTtZQUMvQyxJQUFJO1lBQ0osSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFrQztZQUNoRSxPQUFPLEVBQUUsSUFBSTtZQUNiLFFBQVEsRUFBRSxjQUFJLENBQUMs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