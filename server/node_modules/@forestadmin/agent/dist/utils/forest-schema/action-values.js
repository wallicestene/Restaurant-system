"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const action_fields_1 = __importDefault(require("./action-fields"));
const generator_actions_1 = __importDefault(require("./generator-actions"));
const id_1 = __importDefault(require("../id"));
/**
 * This utility class converts form values from our internal format to the format that is
 * used in the frontend for action forms.
 */
class ForestValueConverter {
    /**
     * Proper form data parser which converts data from an action form result to the format
     * that is internally used in datasources.
     */
    static makeFormData(dataSource, rawData, fields) {
        const data = {};
        for (const [key, value] of Object.entries(rawData)) {
            const field = fields.find(f => f.label === key);
            // Skip fields from the default form
            if (!generator_actions_1.default.defaultFields.map(f => f.field).includes(key)) {
                if (action_fields_1.default.isCollectionField(field) && value) {
                    const collection = dataSource.getCollection(field.collectionName);
                    data[key] = id_1.default.unpackId(collection.schema, value);
                }
                else if (action_fields_1.default.isFileField(field) && value) {
                    data[key] = this.parseDataUri(value);
                }
                else if (action_fields_1.default.isFileListField(field) && value) {
                    data[key] = value?.map(v => this.parseDataUri(v));
                }
                else {
                    data[key] = value;
                }
            }
        }
        return data;
    }
    /**
     * Form data parser which extracts the data from what is provided by the frontend when
     * change hooks are called.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static makeFormDataFromFields(dataSource, fields) {
        const data = {};
        for (const field of fields) {
            // Skip fields from the default form
            if (!generator_actions_1.default.defaultFields.map(f => f.field).includes(field.field)) {
                if (field.reference && field.value) {
                    const [collectionName] = field.reference.split('.');
                    const collection = dataSource.getCollection(collectionName);
                    data[field.field] = id_1.default.unpackId(collection.schema, field.value);
                }
                else if (field.type === 'File') {
                    data[field.field] = this.parseDataUri(field.value);
                }
                else if (Array.isArray(field.type) && field.type[0] === 'File') {
                    data[field.field] = field.value?.map(v => this.parseDataUri(v));
                }
                else {
                    data[field.field] = field.value;
                }
            }
        }
        return data;
    }
    /**
     * This last form data parser tries to guess the types from the data itself.
     *
     * - Fields with type "Collection" which target collections where the pk is not a string or
     * derivative (mongoid, uuid, ...) won't be parser correctly, as we don't have enough information
     * to properly guess the type
     * - Fields of type "String" but where the final user entered a data-uri manually in the frontend
     * will be wrongfully parsed.
     */
    static makeFormDataUnsafe(rawData) {
        const data = {};
        for (const [key, value] of Object.entries(rawData)) {
            // Skip fields from the default form
            if (!generator_actions_1.default.defaultFields.map(f => f.field).includes(key)) {
                if (Array.isArray(value) && value.every(v => this.isDataUri(v))) {
                    data[key] = value.map(uri => this.parseDataUri(uri));
                }
                else if (this.isDataUri(value)) {
                    data[key] = this.parseDataUri(value);
                }
                else {
                    data[key] = value;
                }
            }
        }
        return data;
    }
    static valueToForest(field, value) {
        if (action_fields_1.default.isEnumField(field)) {
            return field.enumValues.includes(value) ? value : null;
        }
        if (action_fields_1.default.isEnumListField(field)) {
            return value?.filter(v => field.enumValues.includes(v));
        }
        if (field.type === 'Collection') {
            return value?.join('|');
        }
        if (field.type === 'File') {
            return this.makeDataUri(value);
        }
        if (field.type === 'FileList') {
            return value?.map(f => this.makeDataUri(f));
        }
        return value;
    }
    static parseDataUri(dataUri) {
        if (!dataUri)
            return null;
        // Poor man's data uri parser (spec compliants one don't get the filename).
        // Hopefully this does not break.
        const [header, data] = dataUri.substring(5).split(',');
        const [mimeType, ...mediaTypes] = header.split(';');
        const result = { mimeType, buffer: Buffer.from(data, 'base64') };
        for (const mediaType of mediaTypes) {
            const index = mediaType.indexOf('=');
            if (index !== -1)
                result[mediaType.substring(0, index)] = decodeURIComponent(mediaType.substring(index + 1));
        }
        return result;
    }
    static makeDataUri(file) {
        if (!file)
            return null;
        const { mimeType, buffer, ...rest } = file;
        const mediaTypes = Object.entries(rest)
            .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
            .join(';');
        return mediaTypes.length
            ? `data:${file.mimeType};${mediaTypes};base64,${buffer.toString('base64')}`
            : `data:${file.mimeType};base64,${buffer.toString('base64')}`;
    }
    static isDataUri(value) {
        return typeof value === 'string' && value.startsWith('data:');
    }
}
exports.default = ForestValueConverter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXZhbHVlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9mb3Jlc3Qtc2NoZW1hL2FjdGlvbi12YWx1ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxvRUFBMkM7QUFDM0MsNEVBQXlEO0FBQ3pELCtDQUE0QjtBQUk1Qjs7O0dBR0c7QUFDSCxNQUFxQixvQkFBb0I7SUFDdkM7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFzQixFQUFFLE9BQWlCLEVBQUUsTUFBcUI7UUFDbEYsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWhCLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBRWhELG9DQUFvQztZQUNwQyxJQUFJLENBQUMsMkJBQXNCLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3pFLElBQUksdUJBQVksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7b0JBQ2xELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUVsRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQWUsQ0FBQyxDQUFDO2lCQUNsRTtxQkFBTSxJQUFJLHVCQUFZLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssRUFBRTtv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