"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const datasource_customizer_1 = require("@forestadmin/datasource-customizer");
const cors_1 = __importDefault(require("@koa/cors"));
const router_1 = __importDefault(require("@koa/router"));
const promises_1 = require("fs/promises");
const json_stringify_pretty_compact_1 = __importDefault(require("json-stringify-pretty-compact"));
const koa_bodyparser_1 = __importDefault(require("koa-bodyparser"));
const framework_mounter_1 = __importDefault(require("./framework-mounter"));
const routes_1 = __importDefault(require("./routes"));
const services_1 = __importDefault(require("./services"));
const customization_1 = __importDefault(require("./services/model-customizations/customization"));
const generator_1 = __importDefault(require("./utils/forest-schema/generator"));
const options_validator_1 = __importDefault(require("./utils/options-validator"));
/**
 * Allow to create a new Forest Admin agent from scratch.
 * Builds the application by composing and configuring all the collection decorators.
 *
 * Minimal code to add a datasource
 * @example
 * new AgentBuilder(options)
 *  .addDataSource(new SomeDataSource())
 *  .start();
 */
class Agent extends framework_mounter_1.default {
    /**
     * Create a new Agent Builder.
     * If any options are missing, the default will be applied:
     * ```
     *  forestServerUrl: 'https://api.forestadmin.com',
     *  logger: (level, data) => console.error(level, data),
     *  prefix: 'api/v1',
     *  schemaPath: '.forestadmin-schema.json',
     *  permissionsCacheDurationInSeconds: 15 * 60,
     * ```
     * @param options options
     * @example
     * new AgentBuilder(options)
     *  .addDataSource(new DataSource())
     *  .start();
     */
    constructor(options) {
        const allOptions = options_validator_1.default.validate(options_validator_1.default.withDefaults(options));
        super(allOptions.prefix, allOptions.logger);
        this.options = allOptions;
        this.customizer = new datasource_customizer_1.DataSourceCustomizer();
        this.customizationService = new customization_1.default(allOptions);
    }
    /**
     * Start the agent.
     */
    async start() {
        const router = await this.buildRouterAndSendSchema();
        await this.options.forestAdminClient.subscribeToServerEvents();
        this.options.forestAdminClient.onRefreshCustomizations(this.restart.bind(this));
        await this.mount(router);
    }
    /**
     * Stop the agent.
     */
    async stop() {
        // Close anything related to ForestAdmin client
        this.options.forestAdminClient.close();
        // Stop at framework level
        await super.stop();
    }
    /**
     * Restart the agent at runtime (remount routes).
     */
    async restart() {
        // We force sending schema when restarting
        const updatedRouter = await this.buildRouterAndSendSchema();
        await this.remount(updatedRouter);
    }
    /**
     * Add a datasource
     * @param factory the datasource to add
     * @param options the options
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/data-sources/connection Documentation Link}
     */
    addDataSource(factory, options) {
        this.customizer.addDataSource(factory, options);
        return this;
    }
    /**
     * Create a new API chart
     * @param name name of the chart
     * @param definition definition of the chart
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/charts Documentation Link}
     * @example
     * .addChart('numCustomers', (context, resultBuilder) => {
     *   return resultBuilder.distribution({
     *     tomatoes: 10,
     *     potatoes: 20,
     *     carrots: 30,
     *   });
     * })
     */
    addChart(name, definition) {
        this.customizer.addChart(name, definition);
        return this;
    }
    /**
     * Allow to interact with a decorated collection
     * @param name the name of the collection to manipulate
     * @param handle a function that provide a collection builder on the given collection name
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/agent-customization Documentation Link}
     * @example
     * .customizeCollection('books', books => books.renameField('xx', 'yy'))
     */
    customizeCollection(name, handle) {
        this.customizer.customizeCollection(name, handle);
        return this;
    }
    /**
     * Remove collections from the exported schema (they will still be usable within the agent).
     * @param names the collections to remove
     * @example
     * .removeField('aCollectionToRemove', 'anotherCollectionToRemove');
     */
    removeCollection(...names) {
        this.customizer.removeCollection(...names);
        return this;
    }
    /**
     * Load a plugin across all collections
     * @param plugin instance of the plugin
     * @param options options which need to be passed to the plugin
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/plugins Documentation Link}
     * @example
     * import advancedExportPlugin from '@forestadmin/plugin-advanced-export';
     *
     * agent.use(advancedExportPlugin, { format: 'xlsx' });
     */
    use(plugin, options) {
        this.customizer.use(plugin, options);
        return this;
    }
    /**
     * Create an http handler which can respond to all queries which are expected from an agent.
     */
    async getRouter(dataSource) {
        // Bootstrap app
        const services = (0, services_1.default)(this.options);
        const routes = (0, routes_1.default)(dataSource, this.options, services);
        await Promise.all(routes.map(route => route.bootstrap()));
        // Build router
        const router = new router_1.default();
        router.all('(.*)', (0, cors_1.default)({ credentials: true, maxAge: 24 * 3600, privateNetworkAccess: true }));
        router.use((0, koa_bodyparser_1.default)({ jsonLimit: '50mb' }));
        routes.forEach(route => route.setupRoutes(router));
        return router;
    }
    async buildRouterAndSendSchema() {
        const { isProduction, logger, typingsPath, typingsMaxDepth } = this.options;
        // It allows to rebuild the full customization stack with no code customizations
        this.nocodeCustomizer = new datasource_customizer_1.DataSourceCustomizer();
        this.nocodeCustomizer.addDataSource(this.customizer.getFactory());
        this.nocodeCustomizer.use(this.customizationService.addCustomizations);
        const dataSource = await this.nocodeCustomizer.getDataSource(logger);
        const [router] = await Promise.all([
            this.getRouter(dataSource),
            this.sendSchema(dataSource),
            !isProduction && typingsPath
                ? this.customizer.updateTypesOnFileSystem(typingsPath, typingsMaxDepth)
                : Promise.resolve(),
        ]);
        return router;
    }
    /**
     * Send the apimap to forest admin server
     */
    async sendSchema(dataSource) {
        const { schemaPath, skipSchemaUpdate, isProduction, experimental } = this.options;
        // skipSchemaUpdate is mainly used in cloud version
        if (skipSchemaUpdate) {
            this.options.logger('Warn', 'Schema update was skipped (caused by options.skipSchemaUpdate=true)');
            return;
        }
        // Either load the schema from the file system or build it
        let schema;
        // When using experimental no-code features even in production we need to build a new schema
        if (!experimental?.webhookCustomActions && isProduction) {
            try {
                schema = JSON.parse(await (0, promises_1.readFile)(schemaPath, { encoding: 'utf-8' }));
            }
            catch (e) {
                throw new Error(`Can't load ${schemaPath}. Providing a schema is mandatory in production.`);
            }
        }
        else {
            schema = await generator_1.default.buildSchema(dataSource, this.customizationService.buildFeatures());
            const pretty = (0, json_stringify_pretty_compact_1.default)(schema, { maxLength: 100 });
            await (0, promises_1.writeFile)(schemaPath, pretty, { encoding: 'utf-8' });
        }
        // Send schema to forest servers
        const updated = await this.options.forestAdminClient.postSchema(schema);
        const message = updated
            ? 'Schema was updated, sending new version'
            : 'Schema was not updated since last run';
        this.options.logger('Info', message);
    }
}
exports.default = Agent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYWdlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1REFBdUQ7QUFDdkQsOEVBUTRDO0FBRzVDLHFEQUE2QjtBQUM3Qix5REFBaUM7QUFDakMsMENBQWtEO0FBQ2xELGtHQUFzRDtBQUN0RCxvRUFBd0M7QUFFeEMsNEVBQW1EO0FBQ25ELHNEQUFrQztBQUNsQywwREFBc0M7QUFDdEMsa0dBQWlGO0FBRWpGLGdGQUE4RDtBQUM5RCxrRkFBeUQ7QUFFekQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBcUIsS0FBbUMsU0FBUSwyQkFBZ0I7SUFNOUU7Ozs7Ozs7Ozs7Ozs7OztPQWVHO0lBQ0gsWUFBWSxPQUFxQjtRQUMvQixNQUFNLFVBQVUsR0FBRywyQkFBZ0IsQ0FBQyxRQUFRLENBQUMsMkJBQWdCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDckYsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO1FBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSw0Q0FBb0IsRUFBSyxDQUFDO1FBQ2hELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLHVCQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxLQUFLO1FBQ1QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUVyRCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUMvRCxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFD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