"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const factory_1 = __importDefault(require("../factory"));
const leaf_1 = __importDefault(require("../nodes/leaf"));
exports.default = () => ({
    Blank: [
        {
            dependsOn: ['In'],
            forTypes: ['String'],
            replacer: leaf => leaf.override({ operator: 'In', value: [null, ''] }),
        },
        {
            dependsOn: ['Missing'],
            replacer: leaf => leaf.override({ operator: 'Missing' }),
        },
    ],
    Missing: [
        {
            dependsOn: ['Equal'],
            replacer: leaf => leaf.override({ operator: 'Equal', value: null }),
        },
    ],
    Present: [
        {
            dependsOn: ['NotIn'],
            forTypes: ['String'],
            replacer: leaf => leaf.override({ operator: 'NotIn', value: [null, ''] }),
        },
        {
            dependsOn: ['NotEqual'],
            replacer: leaf => leaf.override({ operator: 'NotEqual', value: null }),
        },
    ],
    Equal: [
        {
            dependsOn: ['In'],
            replacer: leaf => leaf.override({ operator: 'In', value: [leaf.value] }),
        },
    ],
    In: [
        {
            dependsOn: ['Equal', 'Match'],
            forTypes: ['String'],
            replacer: leaf => {
                const values = leaf.value;
                const conditions = [];
                for (const value of [null, ''])
                    if (values.includes(value))
                        conditions.push(new leaf_1.default(leaf.field, 'Equal', value));
                if (values.some(v => v !== null && v !== '')) {
                    const escaped = values.filter(Boolean).map(str => str.replace(/[.|[\]]/g, m => `\\${m}`));
                    const regexp = new RegExp(`^${escaped.join('|')}$`, 'g');
                    conditions.push(new leaf_1.default(leaf.field, 'Match', regexp));
                }
                return factory_1.default.union(...conditions);
            },
        },
        {
            dependsOn: ['Equal'],
            replacer: leaf => factory_1.default.union(...leaf.value.map(item => leaf.override({ operator: 'Equal', value: item }))),
        },
    ],
    NotEqual: [
        {
            dependsOn: ['NotIn'],
            replacer: leaf => leaf.override({ operator: 'NotIn', value: [leaf.value] }),
        },
    ],
    NotIn: [
        {
            dependsOn: ['NotEqual', 'Match'],
            forTypes: ['String'],
            replacer: leaf => {
                const values = leaf.value;
                const conditions = [];
                for (const value of [null, ''])
                    if (values.includes(value))
                        conditions.push(new leaf_1.default(leaf.field, 'NotEqual', value));
                if (values.some(v => v !== null && v !== '')) {
                    const escaped = values.filter(Boolean).map(str => str.replace(/[.|[\]]/g, m => `\\${m}`));
                    const regexp = new RegExp(`(?!${escaped.join('|')})`, 'g');
                    conditions.push(new leaf_1.default(leaf.field, 'Match', regexp));
                }
                return factory_1.default.intersect(...conditions);
            },
        },
        {
            dependsOn: ['NotEqual'],
            replacer: leaf => factory_1.default.intersect(...leaf.value.map(item => leaf.override({ operator: 'NotEqual', value: item }))),
        },
    ],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyaXNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL3F1ZXJ5L2NvbmRpdGlvbi10cmVlL3RyYW5zZm9ybXMvY29tcGFyaXNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHlEQUE4QztBQUU5Qyx5REFBOEM7QUFHOUMsa0JBQWUsR0FBNkMsRUFBRSxDQUFDLENBQUM7SUFDOUQsS0FBSyxFQUFFO1FBQ0w7WUFDRSxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDakIsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQ3ZFO1FBQ0Q7WUFDRSxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDdEIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztTQUN6RDtLQUNGO0lBQ0QsT0FBTyxFQUFFO1FBQ1A7WUFDRSxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDcEIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ3BFO0tBQ0Y7SUFDRCxPQUFPLEVBQUU7UUFDUDtZQUNFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNwQixRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDcEIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFP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