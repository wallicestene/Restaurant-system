"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const map_deprecated_1 = __importDefault(require("./decorators/computed/utils/map-deprecated"));
const add_external_relation_1 = __importDefault(require("./plugins/add-external-relation"));
const import_field_1 = __importDefault(require("./plugins/import-field"));
class CollectionCustomizer {
    get schema() {
        return this.stack.validation.getCollection(this.name).schema;
    }
    constructor(dataSourceCustomizer, stack, name) {
        /**
         * Add a new field on the collection.
         * @param name the name of the field
         * @param definition The definition of the field
         * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/computed Documentation Link}
         * @example
         * .addField('fullName', {
         *    columnType: 'String',
         *    dependencies: ['firstName', 'lastName'],
         *    getValues: (records) => records.map(record => \`${record.lastName} ${record.firstName}\`),
         * });
         */
        this.addField = (name, definition) => {
            return this.pushCustomization(async () => {
                const collectionBeforeRelations = this.stack.earlyComputed.getCollection(this.name);
                const collectionAfterRelations = this.stack.lateComputed.getCollection(this.name);
                const canBeComputedBeforeRelations = definition.dependencies.every(field => {
                    try {
                        return !!datasource_toolkit_1.CollectionUtils.getFieldSchema(collectionBeforeRelations, field);
                    }
                    catch {
                        return false;
                    }
                });
                const collection = canBeComputedBeforeRelations
                    ? collectionBeforeRelations
                    : collectionAfterRelations;
                collection.registerComputed(name, (0, map_deprecated_1.default)(definition));
            });
        };
        this.dataSourceCustomizer = dataSourceCustomizer;
        this.name = name;
        this.stack = stack;
    }
    /**
     * Load a plugin on the collection.
     * @param plugin reference to the plugin function
     * @param options options to pass to the plugin
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/plugins Documentation Link}
     * @example
     * import { createFileField } from '@forestadmin/plugin-s3';
     *
     * collection.use(createFileField, { fieldname: 'avatar' }),
     */
    use(plugin, options) {
        return this.pushCustomization(async () => {
            await plugin(this.dataSourceCustomizer, this, options);
        });
    }
    /**
     * Disable count in list view pagination for improved performance.
     *
     * @example
     * .disableCount()
     */
    disableCount() {
        return this.pushCustomization(async () => {
            this.stack.schema.getCollection(this.name).overrideSchema({ countable: false });
        });
    }
    /**
     * Import a field from a many to one or one to one relation.
     *
     * @param name the name of the field that will be created on the collection
     * @param options options to import the field
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/import-rename-delete#moving-fields Documentation Link}
     * @example
     * .importField('authorName', { path: 'author:fullName' })
     */
    importField(name, options) {
        return this.use(import_field_1.default, { name, ...options });
    }
    /**
     * Allow to rename a field of a given collection.
     * @param oldName the current name of the field in a given collection
     * @param newName the new name of the field
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/import-rename-delete#renaming-and-removing-fields Documentation Link}
     * @example
     * .renameField('theCurrentNameOfTheField', 'theNewNameOfTheField');
     */
    renameField(oldName, newName) {
        return this.pushCustomization(async () => {
            this.stack.renameField.getCollection(this.name).renameField(oldName, newName);
        });
    }
    /**
     * Remove fields from the exported schema (they will still be usable within the agent).
     * @param names the fields to remove
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/import-rename-delete#renaming-and-removing-fields Documentation Link}
     * @example
     * .removeField('aFieldToRemove', 'anotherFieldToRemove');
     */
    removeField(...names) {
        return this.pushCustomization(async () => {
            const collection = this.stack.publication.getCollection(this.name);
            for (const name of names)
                collection.changeFieldVisibility(name, false);
        });
    }
    /**
     * Add a new action on the collection.
     * @param name the name of the action
     * @param definition the definition of the action
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/actions Documentation Link}
     * @example
     * .addAction('is live', {
     *    scope: 'Single',
     *    execute: async (context, resultBuilder) => {
     *      return resultBuilder.success('Is live!');
     *    },
     *  })
     */
    addAction(name, definition) {
        return this.pushCustomization(async () => {
            this.stack.action
                .getCollection(this.name)
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .addAction(name, definition);
        });
    }
    /**
     * Create a new API chart
     * @param name name of the chart
     * @param definition definition of the chart
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/charts Documentation Link}
     * @example
     * .addChart('numCustomers', (context, resultBuilder) => {
     *   return resultBuilder.distribution({
     *     tomatoes: 10,
     *     potatoes: 20,
     *     carrots: 30,
     *   });
     * })
     */
    addChart(name, definition) {
        return this.pushCustomization(async () => {
            this.stack.chart.getCollection(this.name).addChart(name, definition);
        });
    }
    /**
     * Add a new validator to the edition form of a given field
     * @param name The name of the field
     * @param operator The validator that you wish to add
     * @param value A configuration value that the validator may need
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/validation Documentation Link}
     * @example
     * .addFieldValidation('firstName', 'LongerThan', 2);
     */
    addFieldValidation(name, operator, value) {
        return this.pushCustomization(async () => {
            this.stack.validation.getCollection(this.name).addValidation(name, { operator, value });
        });
    }
    /**
     * Add a new hook handler to an action
     * @param position Either if the hook is executed before or after the action
     * @param type Type of action which should be hooked
     * @param handler Callback that should be executed when the hook is triggered
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/hooks Documentation Link}
     * @example
     * .addHook('Before', 'List', async (context) => {
     *   // Do something before the list action
     * });
     */
    addHook(position, type, handler) {
        return this.pushCustomization(async () => {
            this.stack.hook
                .getCollection(this.name)
                .addHook(position, type, handler);
        });
    }
    /**
     * Add a many to one relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param options extra information about the relation
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/relationships/single-record#many-to-one-relations Documentation Link}
     * @example
     * books.addManyToOneRelation('myAuthor', 'persons', { foreignKey: 'authorId' })
     */
    addManyToOneRelation(name, foreignCollection, options) {
        return this.pushRelation(name, {
            type: 'ManyToOne',
            foreignCollection,
            foreignKey: options.foreignKey,
            foreignKeyTarget: options.foreignKeyTarget,
        });
    }
    /**
     * Add a one to many relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param options extra information about the relation
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/relationships/multiple-records#one-to-many-relations Documentation Link}
     * @example
     * persons.addOneToManyRelation('writtenBooks', 'books', { originKey: 'authorId' })
     */
    addOneToManyRelation(name, foreignCollection, options) {
        return this.pushRelation(name, {
            type: 'OneToMany',
            foreignCollection,
            originKey: options.originKey,
            originKeyTarget: options.originKeyTarget,
        });
    }
    /**
     * Add a one to one relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param options extra information about the relation
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/relationships/single-record#one-to-one-relations Documentation Link}
     * @example
     * persons.addOneToOneRelation('bestFriend', 'persons', { originKey: 'bestFriendId' })
     */
    addOneToOneRelation(name, foreignCollection, options) {
        return this.pushRelation(name, {
            type: 'OneToOne',
            foreignCollection,
            originKey: options.originKey,
            originKeyTarget: options.originKeyTarget,
        });
    }
    /**
     * Add a many to many relation to the collection
     * @param name name of the new relation
     * @param foreignCollection name of the targeted collection
     * @param throughCollection name of the intermediary collection
     * @param options extra information about the relation
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/relationships/multiple-records#many-to-many-relations Documentation Link}
     * @example
     * dvds.addManyToManyRelation('rentalsOfThisDvd', 'rentals', 'dvdRentals', {
     *   originKey: 'dvdId',
     *   foreignKey: 'rentalId'
     * })
     */
    addManyToManyRelation(name, foreignCollection, throughCollection, options) {
        return this.pushRelation(name, {
            type: 'ManyToMany',
            foreignCollection,
            throughCollection,
            originKey: options.originKey,
            originKeyTarget: options.originKeyTarget,
            foreignKey: options.foreignKey,
            foreignKeyTarget: options.foreignKeyTarget,
        });
    }
    /**
     * Add a virtual collection into the related data of a record.
     *
     * @param name name of the relation
     * @param definition the definition of the new relation
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/relationships/multiple-records#external-relations Documentation Link}
     * @example
     * .addExternalRelation('states', {
     *   schema: { code: 'Number', name: 'String' },
     *   listRecords: ({ id }) => {
     *     return record.id == 34 ?
     *      [{ code: 'AL', name: 'Alabama' }, { code: 'AK', name: 'Alaska' }] :
     *      [{ code: 'AZ', name: 'Arizona' }, { code: 'TX', name: 'Texas' }];
     *   }
     * })
     */
    addExternalRelation(name, definition) {
        return this.use(add_external_relation_1.default, { name, ...definition });
    }
    /**
     * Add a new segment on the collection.
     * @param name the name of the segment
     * @param definition a function used to generate a condition tree or a condition tree
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/segments Documentation Link}
     * @example
     * .addSegment(
     *    'Wrote more than 2 books',
     *    { field: 'booksCount', operator: 'GreaterThan', value: 2 }
     * );
     */
    addSegment(name, definition) {
        return this.pushCustomization(async () => {
            this.stack.segment.getCollection(this.name).addSegment(name, definition);
        });
    }
    /**
     * Enable sorting on a specific field using emulation.
     * As for all the emulation method, the field sorting will be done in-memory.
     * @param name the name of the field to enable emulation on
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/sort#emulation Documentation Link}
     * @example
     * .emulateFieldSorting('fullName');
     */
    emulateFieldSorting(name) {
        return this.pushCustomization(async () => {
            this.stack.sortEmulate.getCollection(this.name).emulateFieldSorting(name);
        });
    }
    /**
     * Replace an implementation for the sorting.
     * The field sorting will be done by the datasource.
     * @param name the name of the field to enable sort
     * @param equivalentSort the sort equivalent
     * @see @{@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/sort Documentation Link}
     * @example
     * .replaceFieldSorting(
     *   'fullName',
     *   [
     *     { field: 'firstName', ascending: true },
     *     { field: 'lastName',  ascending: true },
     *   ]
     * )
     */
    replaceFieldSorting(name, equivalentSort) {
        return this.pushCustomization(async () => {
            this.stack.sortEmulate
                .getCollection(this.name)
                .replaceFieldSorting(name, equivalentSort);
        });
    }
    /**
     * Enable filtering on a specific field using emulation.
     * As for all the emulation method, the field filtering will be done in-memory.
     * @param name the name of the field to enable emulation on
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/filter#emulation Documentation Link}
     * @example
     * .emulateFieldFiltering('aField');
     */
    emulateFieldFiltering(name) {
        return this.pushCustomization(async () => {
            const collection = this.stack.lateOpEmulate.getCollection(this.name);
            const field = collection.schema.fields[name];
            if (typeof field.columnType === 'string') {
                const operators = datasource_toolkit_1.allowedOperatorsForColumnType[field.columnType];
                for (const operator of operators) {
                    if (!field.filterOperators?.has(operator)) {
                        this.emulateFieldOperator(name, operator);
                    }
                }
            }
        });
    }
    /**
     * Enable filtering on a specific field with a specific operator using emulation.
     * As for all the emulation method, the field filtering will be done in-memory.
     * @param name the name of the field to enable emulation on
     * @param operator the operator to emulate
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/filter Documentation Link}
     * @example
     * .emulateFieldOperator('aField', 'In');
     */
    emulateFieldOperator(name, operator) {
        return this.pushCustomization(async () => {
            const collection = this.stack.earlyOpEmulate.getCollection(this.name).schema.fields[name]
                ? this.stack.earlyOpEmulate.getCollection(this.name)
                : this.stack.lateOpEmulate.getCollection(this.name);
            collection.emulateFieldOperator(name, operator);
        });
    }
    /**
     * Choose how binary data should be transported to the GUI.
     * By default, all fields are transported as 'datauri', with the exception of primary and foreign
     * keys.
     *
     * Using 'datauri' allows to use the FilePicker widget, while 'hex' is more suitable for
     * short binary data (for instance binary uuids).
     *
     * @param name the name of the field
     * @param binaryMode either 'datauri' or 'hex'
     * @example
     * .replaceFieldBinaryMode('avatar', 'datauri');
     */
    replaceFieldBinaryMode(name, binaryMode) {
        return this.pushCustomization(async () => {
            this.stack.binary.getCollection(this.name).setBinaryMode(name, binaryMode);
        });
    }
    /**
     * Replace an implementation for a specific operator on a specific field.
     * The operator replacement will be done by the datasource.
     * @param name the name of the field to filter on
     * @param operator the operator to replace
     * @param replacer the proposed implementation
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/filter#substitution Documentation Link}
     * @example
     * .replaceFieldOperator('fullName', 'Contains', (value) => {
     *    return {
     *      aggregator: 'Or',
     *      conditions: [{
     *        field: 'firstName',
     *        operator: 'Contains',
     *        value
     *      }, {
     *        field: 'lastName',
     *        operator: 'Contains',
     *        value
     *      }]
     *    }
     * });
     */
    replaceFieldOperator(name, operator, replacer) {
        return this.pushCustomization(async () => {
            const collection = this.stack.earlyOpEmulate.getCollection(this.name).schema.fields[name]
                ? this.stack.earlyOpEmulate.getCollection(this.name)
                : this.stack.lateOpEmulate.getCollection(this.name);
            collection.replaceFieldOperator(name, operator, replacer);
        });
    }
    /**
     * Replace the write behavior of a field.
     * @param name the name of the field
     * @param definition the function or a value to represent the write behavior
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/fields/write Documentation Link}
     * @example
     * .replaceFieldWriting('fullName', fullName => {
     *   const [firstName, lastName] = fullName.split(' ');
     *   return { firstName, lastName };
     * });
     */
    replaceFieldWriting(name, definition) {
        return this.pushCustomization(async () => {
            this.stack.write.getCollection(this.name).replaceFieldWriting(name, definition);
        });
    }
    /**
     * Replace the behavior of the search bar
     * @param definition handler to describe the new behavior
     * @see {@link https://docs.forestadmin.com/developer-guide-agents-nodejs/agent-customization/search Documentation Link}
     * @example
     * .replaceSearch(async (searchString) => {
     *   return { field: 'name', operator: 'Contains', value: searchString };
     * });
     */
    replaceSearch(definition) {
        return this.pushCustomization(async () => {
            this.stack.search
                .getCollection(this.name)
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .replaceSearch(definition);
        });
    }
    pushRelation(name, definition) {
        return this.pushCustomization(async () => {
            this.stack.relation.getCollection(this.name).addRelation(name, definition);
        });
    }
    pushCustomization(customization) {
        this.stack.queueCustomization(customization);
        return this;
    }
}
exports.default = CollectionCustomizer;
//# sourceMappingURL=data:application/json;base64,