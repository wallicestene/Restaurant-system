"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
/**
 * Avoid performing useless database requests:
 * Using segments + scopes + filters + jointure emulation often yields requests which have
 * mutually exclusive conditions or empty "In" leafs.
 */
class EmptyCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    async list(caller, filter, projection) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.list(caller, filter, projection);
        }
        return [];
    }
    async update(caller, filter, patch) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.update(caller, filter, patch);
        }
    }
    async delete(caller, filter) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.delete(caller, filter);
        }
    }
    async aggregate(caller, filter, aggregation, limit) {
        if (!this.returnsEmptySet(filter.conditionTree)) {
            return super.aggregate(caller, filter, aggregation, limit);
        }
        return [];
    }
    returnsEmptySet(tree) {
        if (tree instanceof datasource_toolkit_1.ConditionTreeLeaf) {
            return this.leafReturnsEmptySet(tree);
        }
        if (tree instanceof datasource_toolkit_1.ConditionTreeBranch && tree.aggregator === 'Or') {
            return this.orReturnsEmptySet(tree.conditions);
        }
        if (tree instanceof datasource_toolkit_1.ConditionTreeBranch && tree.aggregator === 'And') {
            return this.andReturnsEmptySet(tree.conditions);
        }
        return false;
    }
    leafReturnsEmptySet(leaf) {
        // Empty 'in` always return zero records.
        return leaf.operator === 'In' && leaf.value.length === 0;
    }
    orReturnsEmptySet(conditions) {
        // Or return no records when
        // - they have no conditions
        // - they have only conditions which return zero records.
        return conditions.length === 0 || conditions.every(c => this.returnsEmptySet(c));
    }
    andReturnsEmptySet(conditions) {
        // There is a leaf which returns zero records
        if (conditions.some(c => this.returnsEmptySet(c))) {
            return true;
        }
        // Scans for mutually exclusive conditions
        // (this a naive implementation, it will miss many occurences)
        const valuesByField = {};
        const leafs = conditions.filter(condition => condition instanceof datasource_toolkit_1.ConditionTreeLeaf);
        for (const { field, operator, value } of leafs) {
            if (!valuesByField[field] && operator === 'Equal') {
                valuesByField[field] = [value];
            }
            else if (!valuesByField[field] && operator === 'In') {
                valuesByField[field] = value;
            }
            else if (valuesByField[field] && operator === 'Equal') {
                valuesByField[field] = valuesByField[field].includes(value) ? [value] : [];
            }
            else if (valuesByField[field] && operator === 'In') {
                valuesByField[field] = valuesByField[field].filter(v => value.includes(v));
            }
        }
        return Object.values(valuesByField).some(v => v.length === 0);
    }
}
exports.default = EmptyCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2VtcHR5L2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3RUFZeUM7QUFFekM7Ozs7R0FJRztBQUNILE1BQXFCLHdCQUF5QixTQUFRLHdDQUFtQjtJQUM5RCxLQUFLLENBQUMsSUFBSSxDQUNqQixNQUFjLEVBQ2QsTUFBdUIsRUFDdkIsVUFBc0I7UUFFdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQy9DLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQy9DO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRVEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsTUFBYyxFQUFFLEtBQWlCO1FBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMvQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM1QztJQUNILENBQUM7SUFFUSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxNQUFjO1FBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMvQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztJQUVRLEtBQUssQ0FBQyxTQUFTLENBQ3RCLE1BQWMsRUFDZCxNQUFjLEVBQ2QsV0FBd0IsRUFDeEIsS0FBYztRQUVkLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRTtZ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