"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
/**
 * Replace unsupported operators in conditions trees by an equivalent subtree which is supported.
 *
 * For example, the "IContains" operator is not supported by most driver, so it is replaced by a
 * "ILike" operator.
 */
class OperatorsEquivalenceCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    refineSchema(childSchema) {
        const fields = {};
        for (const [name, schema] of Object.entries(childSchema.fields)) {
            if (schema.type === 'Column') {
                const newOperators = datasource_toolkit_1.allOperators.filter(operator => datasource_toolkit_1.ConditionTreeEquivalent.hasEquivalentTree(operator, schema.filterOperators, schema.columnType));
                fields[name] = { ...schema, filterOperators: new Set(newOperators) };
            }
            else {
                fields[name] = schema;
            }
        }
        return { ...childSchema, fields };
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: filter.conditionTree?.replaceLeafs(leaf => {
                const schema = datasource_toolkit_1.CollectionUtils.getFieldSchema(this.childCollection, leaf.field);
                return datasource_toolkit_1.ConditionTreeEquivalent.getEquivalentTree(leaf, schema.filterOperators, schema.columnType, caller.timezone);
            }),
        });
    }
}
exports.default = OperatorsEquivalenceCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL29wZXJhdG9ycy1lcXVpdmFsZW5jZS9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0VBVXlDO0FBRXpDOzs7OztHQUtHO0FBQ0gsTUFBcUIsdUNBQXdDLFNBQVEsd0NBQW1CO0lBQ25FLFlBQVksQ0FBQyxXQUE2QjtRQUMzRCxNQUFNLE1BQU0sR0FBZ0MsRUFBRSxDQUFDO1FBRS9DLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMvRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUM1QixNQUFNLFlBQVksR0FBRyxpQ0FBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUNsRCw0Q0FBdUIsQ0FBQyxpQkFBaUIsQ0FDdkMsUUFBUSxFQUNSLE1BQU0sQ0FBQyxlQUFlLEVBQ3RCLE1BQU0sQ0FBQyxVQUFVLENBQ2xCLENBQ0YsQ0FBQztnQkFFRixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sRUFBRSxlQUFlLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQzthQUN0RTtpQkFBTTtnQkFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO2FBQ3ZCO1NBQ0Y7UUFFRCxPQUFPLEVBQUUsR0FBRyxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVrQixLQUFLLENBQUMsWUFBWSxDQUNuQyxNQUFjLEVBQ2QsTUFBd0I7UUFFeEIsT0FBTyxNQUFNLEVBQUUsUUFBUSxDQUFDO1lBQ3RCLGFBQWEsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDdkQsTUFBTSxNQUFNLEdBQUcsb0NBQWUsQ0FBQyxjQUFjLENBQzNDLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxLQUFLLENBQ0ssQ0FBQztnQkFFbEIsT0FBTyw0Q0FBdUIsQ0FBQyxpQkFBaUIsQ0FDOUMsSUFBSSxFQUNKLE1BQU0sQ0FBQyxlQUFlLEVBQ3RCLE1BQU0sQ0FBQyxVQUFVLEVBQ2pCLE1BQU0sQ0FBQyxRQUFRLENBQ2hCLENBQUM7WUFDSixDQUFDLENBQUM7U0FDSCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUEzQ0QsMERBMkNDIn0=