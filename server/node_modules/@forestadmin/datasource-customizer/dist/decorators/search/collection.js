"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const uuid_1 = require("uuid");
const collection_context_1 = __importDefault(require("../../context/collection-context"));
class SearchCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.replacer = null;
    }
    replaceSearch(replacer) {
        this.replacer = replacer;
    }
    refineSchema(subSchema) {
        return { ...subSchema, searchable: true };
    }
    async refineFilter(caller, filter) {
        // Search string is not significant
        if (!filter?.search?.trim().length) {
            return filter?.override({ search: null });
        }
        // Implement search ourselves
        if (this.replacer || !this.childCollection.schema.searchable) {
            const ctx = new collection_context_1.default(this, caller);
            let tree = this.defaultReplacer(filter.search, filter.searchExtended);
            if (this.replacer) {
                const plainTree = await this.replacer(filter.search, filter.searchExtended, ctx);
                tree = datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(plainTree);
            }
            // Note that if no fields are searchable with the provided searchString, the conditions
            // array might be empty, which will create a condition returning zero records
            // (this is the desired behavior).
            return filter.override({
                conditionTree: datasource_toolkit_1.ConditionTreeFactory.intersect(filter.conditionTree, tree),
                search: null,
            });
        }
        // Let subcollection deal with the search
        return filter;
    }
    defaultReplacer(search, extended) {
        const searchableFields = SearchCollectionDecorator.getFields(this.childCollection, extended);
        const conditions = searchableFields
            .map(([field, schema]) => SearchCollectionDecorator.buildCondition(field, schema, search))
            .filter(Boolean);
        return datasource_toolkit_1.ConditionTreeFactory.union(...conditions);
    }
    static buildCondition(field, schema, searchString) {
        const { columnType, enumValues, filterOperators } = schema;
        const isNumber = Number(searchString).toString() === searchString;
        const isUuid = (0, uuid_1.validate)(searchString);
        if (columnType === 'Number' && isNumber && filterOperators?.has('Equal')) {
            return new datasource_toolkit_1.ConditionTreeLeaf(field, 'Equal', Number(searchString));
        }
        if (columnType === 'Enum' && filterOperators?.has('Equal')) {
            const searchValue = SearchCollectionDecorator.lenientFind(enumValues, searchString);
            if (searchValue)
                return new datasource_toolkit_1.ConditionTreeLeaf(field, 'Equal', searchValue);
        }
        if (columnType === 'String') {
            const isCaseSensitive = searchString.toLocaleLowerCase() !== searchString.toLocaleUpperCase();
            const supportsIContains = filterOperators?.has('IContains');
            const supportsContains = filterOperators?.has('Contains');
            const supportsEqual = filterOperators?.has('Equal');
            // Perf: don't use case-insensitive operator when the search string is indifferent to case
            let operator;
            if (supportsIContains && (isCaseSensitive || !supportsContains))
                operator = 'IContains';
            else if (supportsContains)
                operator = 'Contains';
            else if (supportsEqual)
                operator = 'Equal';
            if (operator)
                return new datasource_toolkit_1.ConditionTreeLeaf(field, operator, searchString);
        }
        if (columnType === 'Uuid' && isUuid && filterOperators?.has('Equal')) {
            return new datasource_toolkit_1.ConditionTreeLeaf(field, 'Equal', searchString);
        }
        return null;
    }
    static getFields(collection, extended) {
        const fields = [];
        for (const [name, field] of Object.entries(collection.schema.fields)) {
            if (field.type === 'Column')
                fields.push([name, field]);
            if (extended && (field.type === 'ManyToOne' || field.type === 'OneToOne')) {
                const related = collection.dataSource.getCollection(field.foreignCollection);
                for (const [subName, subField] of Object.entries(related.schema.fields))
                    if (subField.type === 'Column')
                        fields.push([`${name}:${subName}`, subField]);
            }
        }
        return fields;
    }
    static lenientFind(haystack, needle) {
        return (haystack?.find(v => v === needle.trim()) ??
            haystack?.find(v => v.toLocaleLowerCase() === needle.toLocaleLowerCase().trim()));
    }
}
exports.default = SearchCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlYXJjaC9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBV3lDO0FBQ3pDLCtCQUFnRDtBQUdoRCwwRkFBOEU7QUFFOUUsTUFBcUIseUJBQTBCLFNBQVEsd0NBQW1CO0lBQTFFOztRQUNFLGFBQVEsR0FBcUIsSUFBSSxDQUFDO0lBbUhwQyxDQUFDO0lBakhDLGFBQWEsQ0FBQyxRQUEwQjtRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRWUsWUFBWSxDQUFDLFNBQTJCO1FBQ3RELE9BQU8sRUFBRSxHQUFHLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVlLEtBQUssQ0FBQyxZQUFZLENBQ2hDLE1BQWMsRUFDZCxNQUF3QjtRQUV4QixtQ0FBbUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ2xDLE9BQU8sTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUM1RCxNQUFNLEdBQUcsR0FBRyxJQUFJLDRCQUE4QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM3RCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRXRFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENB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