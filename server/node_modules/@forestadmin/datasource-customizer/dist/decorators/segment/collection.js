"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_context_1 = __importDefault(require("../../context/collection-context"));
class SegmentCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.segments = {};
    }
    addSegment(segmentName, definition) {
        this.segments[segmentName] = definition;
        this.markSchemaAsDirty();
    }
    refineSchema(subSchema) {
        return {
            ...subSchema,
            segments: [...subSchema.segments, ...Object.keys(this.segments)],
        };
    }
    async refineFilter(caller, filter) {
        if (!filter) {
            return null;
        }
        let { conditionTree, segment } = filter;
        if (segment && this.segments[segment]) {
            const definition = this.segments[segment];
            const result = typeof definition === 'function'
                ? await definition(new collection_context_1.default(this, caller))
                : await definition;
            const conditionTreeSegment = result instanceof datasource_toolkit_1.ConditionTree ? result : datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(result);
            datasource_toolkit_1.ConditionTreeValidator.validate(conditionTreeSegment, this);
            conditionTree = datasource_toolkit_1.ConditionTreeFactory.intersect(conditionTree, conditionTreeSegment);
            segment = null;
        }
        return filter.override({ conditionTree, segment });
    }
}
exports.default = SegmentCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlZ21lbnQvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdFQVF5QztBQUd6QywwRkFBOEU7QUFFOUUsTUFBcUIsMEJBQTJCLFNBQVEsd0NBQW1CO0lBQTNFOztRQUNVLGFBQVEsR0FBMEMsRUFBRSxDQUFDO0lBMEMvRCxDQUFDO0lBeENDLFVBQVUsQ0FBQyxXQUFtQixFQUFFLFVBQTZCO1FBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFa0IsWUFBWSxDQUFDLFNBQTJCO1FBQ3pELE9BQU87WUFDTCxHQUFHLFNBQVM7WUFDWixRQUFRLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqRSxDQUFDO0lBQ0osQ0FBQztJQUVlLEtBQUssQ0FBQyxZQUFZLENBQ2hDLE1BQWMsRUFDZCxNQUF3QjtRQUV4QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBRXhDLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxNQUFNLE1BQU0sR0FDVixPQUFPLFVBQVUsS0FBSyxVQUFVO2dCQUM5QixDQUFDLENBQUMsTUFBTSxVQUFVLENBQUMsSUFBSSw0QkFBOEIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3BFLENBQUMsQ0FBQyxNQUFNLFVBQVUsQ0FBQztZQUV2QixNQUFNLG9CQUFvQixHQUN4QixNQUFNLFlBQVksa0NBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyx5Q0FBb0IsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFMUYsMkNBQXNCLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxDQUFDO1lBRTVELGFBQWEsR0FBRyx5Q0FBb0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLG9CQUFvQixDQUFDLENBQUM7WUFDcEYsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUVELE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQTNDRCw2Q0EyQ0MifQ==