"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_1 = __importDefault(require("./collection"));
class RenameCollectionDataSourceDecorator extends datasource_toolkit_1.DataSourceDecorator {
    constructor(childDataSource) {
        super(childDataSource, collection_1.default);
        this.fromChildName = {};
        this.toChildName = {};
    }
    get collections() {
        return this.childDataSource.collections.map(({ name }) => super.getCollection(name));
    }
    getCollection(name) {
        // Collection has been renamed, user is using the new name
        if (this.toChildName[name]) {
            return super.getCollection(this.toChildName[name]);
        }
        // Collection has been renamed, user is using the old name
        if (this.fromChildName[name]) {
            throw new Error(`Collection '${name}' has been renamed to '${this.fromChildName[name]}'`);
        }
        // Collection has not been renamed
        return super.getCollection(name);
    }
    /**
     * Helper to rename multiple collections at once.
     * Used by the addDataSource method in DataSourceCustomizer.
     */
    renameCollections(rename) {
        const tuples = typeof rename === 'function'
            ? this.collections.map(({ name }) => [name, rename(name) ?? name])
            : Object.entries(rename ?? {});
        for (const [oldName, newName] of tuples) {
            this.renameCollection(oldName, newName);
        }
    }
    /**
     * Rename a single collection
     * Used by the renameCollection method in DataSourceCustomizer.
     * @param currentName
     * @param newName
     */
    renameCollection(currentName, newName) {
        // Check collection exists
        this.getCollection(currentName);
        // Rename collection
        if (currentName !== newName) {
            // Check new name is not already used
            if (this.collections.some(({ name }) => name === newName)) {
                throw new Error(`The given new collection name "${newName}" is already defined`);
            }
            // Check we don't rename a collection twice
            if (this.toChildName[currentName]) {
                throw new Error(`Cannot rename a collection twice: ` +
                    `${this.toChildName[currentName]}->${currentName}->${newName}`);
            }
            this.fromChildName[currentName] = newName;
            this.toChildName[newName] = currentName;
            for (const collection of this.collections) {
                collection.markSchemaAsDirty();
            }
        }
    }
    /** @internal */
    getCollectionName(childName) {
        return this.fromChildName[childName] ?? childName;
    }
}
exports.default = RenameCollectionDataSourceDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3JlbmFtZS1jb2xsZWN0aW9uL2RhdGFzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBa0Y7QUFFbEYsOERBQStEO0FBRS9ELE1BQXFCLG1DQUFvQyxTQUFRLHdDQUF3RDtJQUl2SCxZQUFZLGVBQTJCO1FBQ3JDLEtBQUssQ0FBQyxlQUFlLEVBQUUsb0JBQW1DLENBQUMsQ0FBQztRQUp0RCxrQkFBYSxHQUEyQixFQUFFLENBQUM7UUFDM0MsZ0JBQVcsR0FBMkIsRUFBRSxDQUFDO0lBSWpELENBQUM7SUFFRCxJQUFhLFdBQVc7UUFDdEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVRLGFBQWEsQ0FBQyxJQUFZO1FBQ2pDLDBEQUEwRDtRQUMxRCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUIsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUVELDBEQUEwRDtRQUMxRCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLElBQUksMEJBQTBCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNGO1FBRUQsa0NBQWtDO1FBQ2xDLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsaUJBQWlCLENBQ2YsTUFBNkU7UUFFN0UsTUFBTSxNQUFNLEdBQ1YsT0FBTyxNQUFNLEtBQUssVUFBVTtZQUMxQixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDbEUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRW5DLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDdkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGdCQUFnQixDQUFDLFdBQW1CLEVBQUUsT0FBZTtRQUNuRCwwQkFBMEI7UUFDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVoQyxvQkFBb0I7UUFDcEIsSUFBSSxXQUFXLEtBQUssT0FBTyxFQUFFO1lBQzNCLHFDQUFxQztZQUNyQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxFQUFFO2dCQUN6RCxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxPQUFPLHNCQUFzQixDQUFDLENBQUM7YUFDbEY7WUFFRCwyQ0FBMkM7WUFDM0MsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNqQyxNQUFNLElBQUksS0FBSyxDQUNiLG9DQUFvQztvQkFDbEMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLFdBQVcsS0FBSyxPQUFPLEVBQUUsQ0FDakUsQ0FBQzthQUNIO1lBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsR0FBRyxPQUFPLENBQUM7WUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxXQUFXLENBQUM7WUFFeEMsS0FBSyxNQUFNLFVBQVUsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUN6QyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsQ0FBQzthQUNoQztTQUNGO0lBQ0gsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixpQkFBaUIsQ0FBQyxTQUFpQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDO0lBQ3BELENBQUM7Q0FDRjtBQWxGRCxzREFrRkMifQ==