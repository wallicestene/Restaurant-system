"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const file_type_1 = __importDefault(require("file-type"));
/**
 * As the transport layer between the forest admin agent and the frontend is JSON-API, binary data
 * is not supported.
 *
 * This decorator implement binary to string translation for binary fields and back.
 * Binary fields can either by represented in the frontend as:
 * - data-uris (so that the current file widgets can be used)
 * - hex strings (for primarykeys, foreign keys, etc...)
 */
class BinaryCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.useHexConversion = new Map();
    }
    setBinaryMode(name, type) {
        const field = this.childCollection.schema.fields[name];
        if (type !== 'datauri' && type !== 'hex') {
            throw new Error('Invalid binary mode');
        }
        if (field?.type === 'Column' && field?.columnType === 'Binary') {
            this.useHexConversion.set(name, type === 'hex');
            this.markSchemaAsDirty();
        }
        else {
            throw new Error('Expected a binary field');
        }
    }
    shouldUseHex(name) {
        if (this.useHexConversion.has(name)) {
            return this.useHexConversion.get(name);
        }
        return (datasource_toolkit_1.SchemaUtils.isPrimaryKey(this.childCollection.schema, name) ||
            datasource_toolkit_1.SchemaUtils.isForeignKey(this.childCollection.schema, name));
    }
    async list(caller, filter, projection) {
        const records = await super.list(caller, filter, projection);
        const promises = records.map(r => this.convertRecord(false, r));
        return Promise.all(promises);
    }
    async aggregate(caller, filter, aggregation, limit) {
        const rows = await super.aggregate(caller, filter, aggregation, limit);
        const promises = rows.map(async (row) => {
            const entries = Object.entries(row.group).map(async ([path, value]) => [
                path,
                await this.convertValue(false, path, value),
            ]);
            return { value: row.value, group: Object.fromEntries(await Promise.all(entries)) };
        });
        return Promise.all(promises);
    }
    async create(caller, data) {
        const dataWithBinary = data.map(record => this.convertRecord(true, record));
        const records = await super.create(caller, await Promise.all(dataWithBinary));
        const recordsWithoutBinary = records.map(record => this.convertRecord(false, record));
        return Promise.all(recordsWithoutBinary);
    }
    async update(caller, filter, patch) {
        const newPatch = await this.convertRecord(true, patch);
        return super.update(caller, filter, newPatch);
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: await filter?.conditionTree?.replaceLeafsAsync(leaf => this.convertConditionTreeLeaf(leaf)),
        });
    }
    refineSchema(subSchema) {
        const fields = {};
        for (const [name, schema] of Object.entries(subSchema.fields)) {
            if (schema.type === 'Column') {
                const columnType = this.replaceColumnType(schema.columnType);
                const validation = this.replaceValidation(name, schema);
                fields[name] = { ...schema, columnType, validation };
            }
            else {
                fields[name] = schema;
            }
        }
        return { ...subSchema, fields };
    }
    async convertRecord(toBackend, record) {
        if (record) {
            const entries = Object.entries(record).map(async ([path, value]) => [
                path,
                await this.convertValue(toBackend, path, value),
            ]);
            return Object.fromEntries(await Promise.all(entries));
        }
        return record;
    }
    async convertConditionTreeLeaf(leaf) {
        const [prefix, suffix] = leaf.field.split(/:(.*)/);
        const schema = this.childCollection.schema.fields[prefix];
        if (schema.type !== 'Column') {
            const conditionTree = await this.dataSource
                .getCollection(schema.foreignCollection)
                .convertConditionTreeLeaf(leaf.override({ field: suffix }));
            return conditionTree.nest(prefix);
        }
        if (BinaryCollectionDecorator.operatorsWithValueReplacement.includes(leaf.operator)) {
            const useHex = this.shouldUseHex(prefix);
            const columnType = leaf.operator === 'In' || leaf.operator === 'NotIn'
                ? [schema.columnType]
                : schema.columnType;
            return leaf.override({
                value: await this.convertValueHelper(true, columnType, useHex, leaf.value),
            });
        }
        return leaf;
    }
    async convertValue(toBackend, path, value) {
        const [prefix, suffix] = path.split(/:(.*)/);
        const schema = this.childCollection.schema.fields[prefix];
        if (schema.type !== 'Column') {
            const foreignCollection = this.dataSource.getCollection(schema.foreignCollection);
            return suffix
                ? foreignCollection.convertValue(toBackend, suffix, value)
                : foreignCollection.convertRecord(toBackend, value);
        }
        const binaryMode = this.shouldUseHex(path);
        return this.convertValueHelper(toBackend, schema.columnType, binaryMode, value);
    }
    async convertValueHelper(toBackend, columnType, useHex, value) {
        if (value) {
            if (columnType === 'Binary') {
                return this.convertScalar(toBackend, useHex, value);
            }
            if (Array.isArray(columnType)) {
                const newValues = value.map(v => this.convertValueHelper(toBackend, columnType[0], useHex, v));
                return Promise.all(newValues);
            }
            if (typeof columnType !== 'string') {
                const entries = Object.entries(columnType).map(async ([key, type]) => [
                    key,
                    await this.convertValueHelper(toBackend, type, useHex, value[key]),
                ]);
                return Object.fromEntries(await Promise.all(entries));
            }
        }
        return value;
    }
    async convertScalar(toBackend, useHex, value) {
        if (toBackend) {
            const string = value;
            return useHex ? Buffer.from(string, 'hex') : Buffer.from(string.split(',')[1], 'base64');
        }
        const buffer = value;
        if (useHex)
            return buffer.toString('hex');
        const mime = (await file_type_1.default.fromBuffer(buffer))?.mime ?? 'application/octet-stream';
        const data = buffer.toString('base64');
        return `data:${mime};base64,${data}`;
    }
    replaceColumnType(columnType) {
        if (typeof columnType === 'string') {
            return columnType === 'Binary' ? 'String' : columnType;
        }
        if (Array.isArray(columnType)) {
            return [this.replaceColumnType(columnType[0])];
        }
        const entries = Object.entries(columnType).map(([key, type]) => [
            key,
            this.replaceColumnType(type),
        ]);
        return Object.fromEntries(entries);
    }
    replaceValidation(name, schema) {
        if (schema.columnType === 'Binary') {
            const validation = [];
            const minLength = schema.validation?.find(v => v.operator === 'LongerThan')?.value;
            const maxLength = schema.validation?.find(v => v.operator === 'ShorterThan')?.value;
            if (this.shouldUseHex(name)) {
                validation.push({ operator: 'Match', value: /^[0-9a-f]+$/ });
                if (minLength)
                    validation.push({ operator: 'LongerThan', value: minLength * 2 + 1 });
                if (maxLength)
                    validation.push({ operator: 'ShorterThan', value: maxLength * 2 - 1 });
            }
            else {
                validation.push({ operator: 'Match', value: /^data:.*;base64,.*/ });
            }
            if (schema.validation?.find(v => v.operator === 'Present')) {
                validation.push({ operator: 'Present' });
            }
            return validation;
        }
        return schema.validation;
    }
}
exports.default = BinaryCollectionDecorator;
// For those operators, we need to replace hex string/datauri by Buffers instances (depending
// on what is actually supported by the underlying connector).
BinaryCollectionDecorator.operatorsWithValueReplacement = [
    ...['After', 'Before', 'Contains', 'EndsWith', 'Equal', 'GreaterThan', 'IContains', 'NotIn'],
    ...['IEndsWith', 'IStartsWith', 'LessThan', 'NotContains', 'NotEqual', 'StartsWith', 'In'],
];
//# sourceMappingURL=data:application/json;base64,