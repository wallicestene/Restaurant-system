import { AggregateResult, Aggregation, Caller, CollectionDecorator, CollectionSchema, DataSourceDecorator, Filter, PaginatedFilter, Projection, RecordData } from '@forestadmin/datasource-toolkit';
import { BinaryMode } from './types';
/**
 * As the transport layer between the forest admin agent and the frontend is JSON-API, binary data
 * is not supported.
 *
 * This decorator implement binary to string translation for binary fields and back.
 * Binary fields can either by represented in the frontend as:
 * - data-uris (so that the current file widgets can be used)
 * - hex strings (for primarykeys, foreign keys, etc...)
 */
export default class BinaryCollectionDecorator extends CollectionDecorator {
    private static readonly operatorsWithValueReplacement;
    dataSource: DataSourceDecorator<BinaryCollectionDecorator>;
    private useHexConversion;
    setBinaryMode(name: string, type: BinaryMode): void;
    private shouldUseHex;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    aggregate(caller: Caller, filter: Filter, aggregation: Aggregation, limit?: number): Promise<AggregateResult[]>;
    create(caller: Caller, data: RecordData[]): Promise<RecordData[]>;
    update(caller: Caller, filter: Filter, patch: RecordData): Promise<void>;
    refineFilter(caller: Caller, filter?: PaginatedFilter): Promise<PaginatedFilter>;
    protected refineSchema(subSchema: CollectionSchema): CollectionSchema;
    private convertRecord;
    private convertConditionTreeLeaf;
    private convertValue;
    private convertValueHelper;
    private convertScalar;
    private replaceColumnType;
    private replaceValidation;
}
//# sourceMappingURL=collection.d.ts.map