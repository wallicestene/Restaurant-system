"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable max-classes-per-file */
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_context_1 = __importDefault(require("../../../context/collection-context"));
class ActionContext extends collection_context_1.default {
    /**
     * @deprecated use `hasFieldChange` instead. [linked issue](https://github.com/ForestAdmin/agent-nodejs/issues/815).
     * @todo remove accessor
     */
    get changedField() {
        console.warn('\x1b[33mwarning:\x1b[0m', 'Usage of `changedField` is deprecated, please use `hasFieldChanged` instead.');
        return this._changedField;
    }
    constructor(collection, caller, formValue, filter, used, changedField) {
        super(collection, caller);
        this.formValues = formValue;
        this.filter = filter;
        this._changedField = changedField;
        this.reset();
        // Spy on which formValues are accessed to set-up change hooks
        if (used) {
            this.formValues = new Proxy(this.formValues, {
                get: (target, prop, receiver) => {
                    if (typeof prop === 'string')
                        used.add(prop);
                    return Reflect.get(target, prop, receiver);
                },
                set: () => {
                    throw new Error('formValues is readonly');
                },
            });
            this.hasFieldChanged = (fieldName) => {
                used.add(fieldName);
                return this._changedField === fieldName;
            };
        }
    }
    /**
     * Get all the records selected by an action
     * @param fields An array of fields needed in the response
     * @example
     * .getRecords(['id', 'isActive', 'name']);
     */
    async getRecords(fields) {
        // This function just queues the request into this.queries, so that we can merge all calls
        // to getRecords() into a single one.
        // The call to setTimeout which resolve the promises will trigger only once all handlers in
        // the customer's form have been called as Promises are queued before calls to setTimeout
        // in Node.js event loop
        // @see https://dev.to/khaosdoctor/node-js-under-the-hood-3-deep-dive-into-the-event-loop-135d\
        //   #microtasks-and-macrotasks
        //   Ordering of micro/macro tasks in Node.js event loop
        //
        // @see https://github.com/graphql/dataloader
        //   A library from facebook from which this pattern is inspired.
        datasource_toolkit_1.ProjectionValidator.validate(this.realCollection, fields);
        const deferred = new datasource_toolkit_1.Deferred();
        const projection = new datasource_toolkit_1.Projection(...fields);
        if (this.queries.length === 0)
            setTimeout(() => this.runQuery());
        this.queries.push({ projection, deferred });
        this.projection = this.projection.union(projection);
        return deferred.promise;
    }
    /**
     * Get all the records ids selected by an action
     */
    async getRecordIds() {
        const compositeIds = await this.getCompositeRecordIds();
        return compositeIds.map(id => id[0]);
    }
    /**
     * Get all the records ids (when the collection uses composite keys)
     */
    async getCompositeRecordIds() {
        const projection = new datasource_toolkit_1.Projection().withPks(this.realCollection);
        const records = await this.getRecords(projection);
        return records.map(r => datasource_toolkit_1.RecordUtils.getPrimaryKey(this.realCollection.schema, r));
    }
    async runQuery() {
        const { queries, projection } = this;
        this.reset();
        try {
            // Run a single query which contains all fields / relations which were requested by
            // the different calls made to getRecords
            const records = await this.collection.list(this.filter, projection);
            // Resolve each on of the promises only with the requested fields.
            for (const query of queries)
                query.deferred.resolve(query.projection.apply(records));
        }
        catch (e) {
            // Rejecting each promises at next tick
            // This ensures that we don't let any promise hanging forever if the customer throws in
            // the rejection handler.
            for (const query of queries) {
                process.nextTick(() => query.deferred.reject(e));
            }
        }
    }
    reset() {
        this.queries = [];
        this.projection = new datasource_toolkit_1.Projection();
    }
}
exports.default = ActionContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2FjdGlvbnMvY29udGV4dC9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUNBQXlDO0FBQ3pDLHdFQVN5QztBQUV6Qyw2RkFBaUY7QUFHakYsTUFBcUIsYUFHbkIsU0FBUSw0QkFBb0M7SUFNNUM7OztPQUdHO0lBQ0gsSUFBSSxZQUFZO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FDVix5QkFBeUIsRUFDekIsOEVBQThFLENBQy9FLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQU9ELFlBQ0UsVUFBc0IsRUFDdEIsTUFBYyxFQUNkLFNBQXFCLEVBQ3JCLE1BQXFCLEVBQ3JCLElBQWtCLEVBQ2xCLFlBQXFCO1FBRXJCLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRWIsOERBQThEO1FBQzlELElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUMzQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFO29CQUM5QixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVE7d0JBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFFN0MsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQzdDLENBQUM7Z0JBQ0QsR0FBRyxF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