"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
class ValidationDecorator extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.validation = {};
    }
    addValidation(name, validation) {
        var _a;
        datasource_toolkit_1.FieldValidator.validate(this, name);
        const field = this.childCollection.schema.fields[name];
        if (field?.type !== 'Column')
            throw new Error('Cannot add validators on a relation, use the foreign key instead');
        if (field.isReadOnly)
            throw new Error('Cannot add validators on a readonly field');
        (_a = this.validation)[name] ?? (_a[name] = []);
        this.validation[name].push(validation);
        this.markSchemaAsDirty();
    }
    async create(caller, data) {
        for (const record of data)
            this.validate(record, caller.timezone, true);
        return super.create(caller, data);
    }
    async update(caller, filter, patch) {
        this.validate(patch, caller.timezone, false);
        return super.update(caller, filter, patch);
    }
    refineSchema(subSchema) {
        const schema = { ...subSchema, fields: { ...subSchema.fields } };
        for (const [name, rules] of Object.entries(this.validation)) {
            const field = { ...schema.fields[name] };
            field.validation = [...(field.validation ?? []), ...rules];
            schema.fields[name] = field;
        }
        return schema;
    }
    validate(record, timezone, allFields) {
        for (const [name, rules] of Object.entries(this.validation)) {
            if (allFields || record[name] !== undefined) {
                // When setting a field to null, only the "Present" validator is relevant
                const applicableRules = record[name] === null ? rules.filter(r => r.operator === 'Present') : rules;
                for (const validator of applicableRules) {
                    const rawLeaf = { field: name, ...validator };
                    const tree = datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(rawLeaf);
                    if (!tree.match(record, this, timezone)) {
                        const message = `'${name}' failed validation rule:`;
                        const rule = validator.value !== undefined
                            ? `${validator.operator}(${validator.value})`
                            : `${validator.operator}`;
                        throw new datasource_toolkit_1.ValidationError(`${message} '${rule}'`);
                    }
                }
            }
        }
    }
}
exports.default = ValidationDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3ZhbGlkYXRpb24vY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdFQVd5QztBQUl6QyxNQUFxQixtQkFBb0IsU0FBUSx3Q0FBbUI7SUFBcEU7O1FBQ1UsZUFBVSxHQUErQyxFQUFFLENBQUM7SUErRHRFLENBQUM7SUE3REMsYUFBYSxDQUFDLElBQVksRUFBRSxVQUEwQjs7UUFDcEQsbUNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQWlCLENBQUM7UUFDdkUsSUFBSSxLQUFLLEVBQUUsSUFBSSxLQUFLLFFBQVE7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1FBQ3RGLElBQUksS0FBSyxDQUFDLFVBQVU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7UUFFbkYsTUFBQSxJQUFJLENBQUMsVUFBVSxFQUFDLElBQUksU0FBSixJQUFJLElBQU0sRUFBRSxFQUFDO1FBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFUSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxJQUFrQjtRQUN0RCxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUk7WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhFLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFD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