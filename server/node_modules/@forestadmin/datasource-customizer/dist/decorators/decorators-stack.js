"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_1 = __importDefault(require("./actions/collection"));
const collection_2 = __importDefault(require("./binary/collection"));
const datasource_1 = __importDefault(require("./chart/datasource"));
const collection_3 = __importDefault(require("./computed/collection"));
const collection_4 = __importDefault(require("./empty/collection"));
const collection_5 = __importDefault(require("./hook/collection"));
const collection_6 = __importDefault(require("./operators-emulate/collection"));
const collection_7 = __importDefault(require("./operators-equivalence/collection"));
const datasource_2 = __importDefault(require("./publication/datasource"));
const collection_8 = __importDefault(require("./relation/collection"));
const collection_9 = __importDefault(require("./rename-field/collection"));
const collection_10 = __importDefault(require("./schema/collection"));
const collection_11 = __importDefault(require("./search/collection"));
const collection_12 = __importDefault(require("./segment/collection"));
const collection_13 = __importDefault(require("./sort-emulate/collection"));
const collection_14 = __importDefault(require("./validation/collection"));
const datasource_3 = __importDefault(require("./write/datasource"));
class DecoratorsStack {
    constructor(dataSource) {
        this.customizations = [];
        let last = dataSource;
        /* eslint-disable no-multi-assign */
        // Step 0: Do not query datasource when we know the result with yield an empty set.
        last = new datasource_toolkit_1.DataSourceDecorator(last, collection_4.default);
        last = new datasource_toolkit_1.DataSourceDecorator(last, collection_7.default);
        // Step 1: Computed-Relation-Computed sandwich (needed because some emulated relations depend
        // on computed fields, and some computed fields depend on relation...)
        // Note that replacement goes before emulation, as replacements may use emulated operators.
        last = this.earlyComputed = new datasource_toolkit_1.DataSourceDecorator(last, collection_3.default);
        last = this.earlyOpEmulate = new datasource_toolkit_1.DataSourceDecorator(last, collection_6.default);
        last = new datasource_toolkit_1.DataSourceDecorator(last, collection_7.default);
        last = this.relation = new datasource_toolkit_1.DataSourceDecorator(last, collection_8.default);
        last = this.lateComputed = new datasource_toolkit_1.DataSourceDecorator(last, collection_3.default);
        last = this.lateOpEmulate = new datasource_toolkit_1.DataSourceDecorator(last, collection_6.default);
        last = new datasource_toolkit_1.DataSourceDecorator(last, collection_7.default);
        // Step 2: Those need access to all fields. They can be loaded in any order.
        last = this.search = new datasource_toolkit_1.DataSourceDecorator(last, collection_11.default);
        last = this.segment = new datasource_toolkit_1.DataSourceDecorator(last, collection_12.default);
        last = this.sortEmulate = new datasource_toolkit_1.DataSourceDecorator(last, collection_13.default);
        // Step 3: Access to all fields AND emulated capabilities
        last = this.chart = new datasource_1.default(last);
        last = this.action = new datasource_toolkit_1.DataSourceDecorator(last, collection_1.default);
        last = this.schema = new datasource_toolkit_1.DataSourceDecorator(last, collection_10.default);
        last = this.write = new datasource_3.default(last);
        last = this.hook = new datasource_toolkit_1.DataSourceDecorator(last, collection_5.default);
        last = this.validation = new datasource_toolkit_1.DataSourceDecorator(last, collection_14.default);
        last = this.binary = new datasource_toolkit_1.DataSourceDecorator(last, collection_2.default);
        // Step 4: Renaming must be either the very first or very last so that naming in customer code
        // is consistent.
        last = this.publication = new datasource_2.default(last);
        last = this.renameField = new datasource_toolkit_1.DataSourceDecorator(last, collection_9.default);
        /* eslint-enable no-multi-assign */
        this.dataSource = last;
    }
    queueCustomization(customization) {
        this.customizations.push(customization);
    }
    /**
     * Apply all customizations
     * Plugins may queue new customizations, or call other plugins which will queue customizations.
     *
     * This method will be called recursively and clears the queue at each recursion to ensure
     * that all customizations are applied in the right order.
     */
    async applyQueuedCustomizations(logger) {
        const queuedCustomizations = this.customizations.slice();
        this.customizations.length = 0;
        while (queuedCustomizations.length) {
            await queuedCustomizations.shift()(logger); // eslint-disable-line no-await-in-loop
            await this.applyQueuedCustomizations(logger); // eslint-disable-line no-await-in-loop
        }
    }
}
exports.default = DecoratorsStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9ycy1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNvcmF0b3JzL2RlY29yYXRvcnMtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBMEY7QUFFMUYsc0VBQTZEO0FBQzdELHFFQUE0RDtBQUM1RCxvRUFBMEQ7QUFDMUQsdUVBQWdFO0FBQ2hFLG9FQUEwRDtBQUMxRCxtRUFBd0Q7QUFDeEQsZ0ZBQWlGO0FBQ2pGLG9GQUF5RjtBQUN6RiwwRUFBc0U7QUFDdEUsdUVBQWdFO0FBQ2hFLDJFQUF1RTtBQUN2RSxzRUFBNEQ7QUFDNUQsc0VBQTREO0FBQzVELHVFQUE4RDtBQUM5RCw0RUFBdUU7QUFDdkUsMEVBQW9FO0FBQ3BFLG9FQUEwRDtBQUUxRCxNQUFxQixlQUFlO0lBc0JsQyxZQUFZLFVBQXNCO1FBRjFCLG1CQUFjLEdBQTZDLEVBQUUsQ0FBQztRQUdwRSxJQUFJLElBQUksR0FBZSxVQUFVLENBQUM7UUFFbEMsb0NBQW9DO1FBQ3BDLG1GQUFtRjtRQUNuRixJQUFJLEdBQUcsSUFBSSx3Q0FBbUIsQ0FBQyxJQUFJLEVBQUUsb0JBQXdCLENBQUMsQ0FBQztRQUMvRCxJQUFJLEdBQUcsSUFBSSx3Q0FBbUIsQ0FBQyxJQUFJLEVBQUUsb0JBQXVDLENBQUMsQ0FBQztRQUU5RSw2RkFBNkY7UUFDN0Ysc0VBQXNFO1FBQ3RFLDJGQUEyRjtRQUMzRixJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHdDQUFtQixDQUFDLElBQUksRUFBRSxvQkFBMkIsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksd0NBQW1CLENBQUMsSUFBSSxFQUFFLG9CQUFtQyxDQUFDLENBQUM7UUFDaEcsSUFBSSxHQUFHLElBQUksd0NBQW1CLENBQUMsSUFBSSxFQUFFLG9CQUF1QyxDQUFDLENBQUM7UUFDOUUsSUFBSSxHQUFHLElBQUksQ0FBQyxR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