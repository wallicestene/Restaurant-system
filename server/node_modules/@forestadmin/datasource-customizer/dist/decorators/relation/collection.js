"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
class RelationCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.relations = {};
    }
    addRelation(name, partialJoint) {
        const relation = this.relationWithOptionalFields(partialJoint);
        this.checkForeignKeys(relation);
        this.checkOriginKeys(relation);
        this.relations[name] = relation;
        this.markSchemaAsDirty();
    }
    async list(caller, filter, projection) {
        const newFilter = await this.refineFilter(caller, filter);
        const newProjection = projection.replace(this.rewriteField, this).withPks(this);
        const records = await this.childCollection.list(caller, newFilter, newProjection);
        if (newProjection.equals(projection))
            return records;
        await this.reprojectInPlace(caller, records, projection);
        return projection.apply(records);
    }
    async aggregate(caller, filter, aggregation, limit) {
        const newFilter = await this.refineFilter(caller, filter);
        // No emulated relations are used in the aggregation
        if (Object.keys(aggregation.projection.relations).every(prefix => !this.relations[prefix])) {
            return this.childCollection.aggregate(caller, newFilter, aggregation, limit);
        }
        // Fallback to full emulation.
        return aggregation.apply(await this.list(caller, filter, aggregation.projection), caller.timezone, limit);
    }
    refineSchema(subSchema) {
        const schema = { ...subSchema, fields: { ...subSchema.fields } };
        for (const [name, relation] of Object.entries(this.relations)) {
            schema.fields[name] = relation;
        }
        return schema;
    }
    async refineFilter(caller, filter) {
        return filter?.override({
            conditionTree: await filter.conditionTree?.replaceLeafsAsync(leaf => this.rewriteLeaf(caller, leaf), this),
            // Replace sort in emulated relations to
            // - sorting by the fk of the relation for many to one
            // - removing the sort altogether for one to one
            //
            // This is far from ideal, but the best that can be done without taking a major
            // performance hit.
            // Customers which want proper sorting should enable emulation in the associated
            // middleware
            sort: filter.sort?.replaceClauses(clause => this.rewriteField(clause.field).map(field => ({ ...clause, field }))),
        });
    }
    relationWithOptionalFields(partialJoint) {
        const relation = { ...partialJoint };
        const target = this.dataSource.getCollection(relation.foreignCollection);
        if (relation.type === 'ManyToOne') {
            relation.foreignKeyTarget ?? (relation.foreignKeyTarget = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(target.schema)[0]);
        }
        else if (relation.type === 'OneToOne' || relation.type === 'OneToMany') {
            relation.originKeyTarget ?? (relation.originKeyTarget = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(this.schema)[0]);
        }
        else if (relation.type === 'ManyToMany') {
            relation.originKeyTarget ?? (relation.originKeyTarget = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(this.schema)[0]);
            relation.foreignKeyTarget ?? (relation.foreignKeyTarget = datasource_toolkit_1.SchemaUtils.getPrimaryKeys(target.schema)[0]);
        }
        return relation;
    }
    checkForeignKeys(relation) {
        if (relation.type === 'ManyToOne' || relation.type === 'ManyToMany') {
            RelationCollectionDecorator.checkKeys(relation.type === 'ManyToMany'
                ? this.dataSource.getCollection(relation.throughCollection)
                : this, this.dataSource.getCollection(relation.foreignCollection), relation.foreignKey, relation.foreignKeyTarget);
        }
    }
    checkOriginKeys(relation) {
        if (relation.type === 'OneToMany' ||
            relation.type === 'OneToOne' ||
            relation.type === 'ManyToMany') {
            RelationCollectionDecorator.checkKeys(relation.type === 'ManyToMany'
                ? this.dataSource.getCollection(relation.throughCollection)
                : this.dataSource.getCollection(relation.foreignCollection), this, relation.originKey, relation.originKeyTarget);
        }
    }
    static checkKeys(owner, targetOwner, keyName, targetName) {
        RelationCollectionDecorator.checkColumn(owner, keyName);
        RelationCollectionDecorator.checkColumn(targetOwner, targetName);
        const key = owner.schema.fields[keyName];
        const target = targetOwner.schema.fields[targetName];
        if (key.columnType !== target.columnType) {
            throw new Error(`Types from '${owner.name}.${keyName}' and ` +
                `'${targetOwner.name}.${targetName}' do not match.`);
        }
    }
    static checkColumn(owner, name) {
        const column = owner.schema.fields[name];
        if (!column || column.type !== 'Column') {
            throw new Error(`Column not found: '${owner.name}.${name}'`);
        }
        if (!column.filterOperators?.has('In')) {
            throw new Error(`Column does not support the In operator: '${owner.name}.${name}'`);
        }
    }
    rewriteField(field) {
        const prefix = field.split(':').shift();
        const schema = this.schema.fields[prefix];
        if (schema.type === 'Column')
            return [field];
        const relation = this.dataSource.getCollection(schema.foreignCollection);
        let result = [];
        if (!this.relations[prefix]) {
            result = relation
                .rewriteField(field.substring(prefix.length + 1))
                .map(subField => `${prefix}:${subField}`);
        }
        else if (schema.type === 'ManyToOne') {
            result = [schema.foreignKey];
        }
        else if (schema.type === 'OneToOne' ||
            schema.type === 'OneToMany' ||
            schema.type === 'ManyToMany') {
            result = [schema.originKeyTarget];
        }
        return result;
    }
    async rewriteLeaf(caller, leaf) {
        const prefix = leaf.field.split(':').shift();
        const schema = this.schema.fields[prefix];
        if (schema.type === 'Column')
            return leaf;
        const relation = this.dataSource.getCollection(schema.foreignCollection);
        let result = leaf;
        if (!this.relations[prefix]) {
            result = (await relation.rewriteLeaf(caller, leaf.unnest())).nest(prefix);
        }
        else if (schema.type === 'ManyToOne') {
            const records = await relation.list(caller, new datasource_toolkit_1.Filter({ conditionTree: leaf.unnest() }), new datasource_toolkit_1.Projection(schema.foreignKeyTarget));
            result = new datasource_toolkit_1.ConditionTreeLeaf(schema.foreignKey, 'In', [
                ...new Set(records
                    .map(record => datasource_toolkit_1.RecordUtils.getFieldValue(record, schema.foreignKeyTarget))
                    .filter(v => v !== null)),
            ]);
        }
        else if (schema.type === 'OneToOne') {
            const records = await relation.list(caller, new datasource_toolkit_1.Filter({ conditionTree: leaf.unnest() }), new datasource_toolkit_1.Projection(schema.originKey));
            result = new datasource_toolkit_1.ConditionTreeLeaf(schema.originKeyTarget, 'In', [
                ...new Set(records
                    .map(record => datasource_toolkit_1.RecordUtils.getFieldValue(record, schema.originKey))
                    .filter(v => v !== null)),
            ]);
        }
        return result;
    }
    async reprojectInPlace(caller, records, projection) {
        const promises = Object.entries(projection.relations).map(async ([prefix, subProjection]) => this.reprojectRelationInPlace(caller, records, prefix, subProjection));
        await Promise.all(promises);
    }
    async reprojectRelationInPlace(caller, records, name, projection) {
        const schema = this.schema.fields[name];
        const association = this.dataSource.getCollection(schema.foreignCollection);
        if (!this.relations[name]) {
            await association.reprojectInPlace(caller, records.map(r => r[name]).filter(Boolean), projection);
        }
        else if (schema.type === 'ManyToOne') {
            const ids = records.map(record => record[schema.foreignKey]).filter(fk => fk !== null);
            const subFilter = new datasource_toolkit_1.Filter({
                conditionTree: new datasource_toolkit_1.ConditionTreeLeaf(schema.foreignKeyTarget, 'In', [...new Set(ids)]),
            });
            const subRecords = await association.list(caller, subFilter, projection.union([schema.foreignKeyTarget]));
            for (const record of records) {
                record[name] = subRecords.find(sr => sr[schema.foreignKeyTarget] === record[schema.foreignKey]);
            }
        }
        else if (schema.type === 'OneToOne' || schema.type === 'OneToMany') {
            const ids = records.map(record => record[schema.originKeyTarget]).filter(okt => okt !== null);
            const subFilter = new datasource_toolkit_1.Filter({
                conditionTree: new datasource_toolkit_1.ConditionTreeLeaf(schema.originKey, 'In', [...new Set(ids)]),
            });
            const subRecords = await association.list(caller, subFilter, projection.union([schema.originKey]));
            for (const record of records) {
                record[name] = subRecords.find(sr => sr[schema.originKey] === record[schema.originKeyTarget]);
            }
        }
    }
}
exports.default = RelationCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,