"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const compute_fields_1 = __importDefault(require("./helpers/compute-fields"));
const rewrite_projection_1 = __importDefault(require("./helpers/rewrite-projection"));
const collection_context_1 = __importDefault(require("../../context/collection-context"));
/** Decorator injects computed fields */
class ComputedCollection extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.computeds = {};
    }
    /** @internal */
    getComputed(path) {
        const index = path.indexOf(':');
        if (index === -1)
            return this.computeds[path];
        const { foreignCollection } = this.schema.fields[path.substring(0, index)];
        const association = this.dataSource.getCollection(foreignCollection);
        return association.getComputed(path.substring(index + 1));
    }
    registerComputed(name, computed) {
        datasource_toolkit_1.FieldValidator.validateName(this.name, name);
        // Check that all dependencies exist and are columns
        for (const field of computed.dependencies) {
            datasource_toolkit_1.FieldValidator.validate(this, field);
        }
        if (computed.dependencies.length <= 0) {
            throw new Error(`Computed field '${this.name}.${name}' must have at least one dependency.`);
        }
        this.computeds[name] = computed;
        this.markSchemaAsDirty();
    }
    async list(caller, filter, projection) {
        const childProjection = projection.replace(path => (0, rewrite_projection_1.default)(this, path));
        const records = await this.childCollection.list(caller, filter, childProjection);
        if (childProjection.equals(projection))
            return records;
        const context = new collection_context_1.default(this, caller);
        return (0, compute_fields_1.default)(context, this, childProjection, projection, records);
    }
    async aggregate(caller, filter, aggregation, limit) {
        // No computed are used in the aggregation => just delegate to the underlying collection.
        if (!aggregation.projection.some(field => this.getComputed(field))) {
            return this.childCollection.aggregate(caller, filter, aggregation, limit);
        }
        // Fallback to full emulation.
        return aggregation.apply(await this.list(caller, filter, aggregation.projection), caller.timezone, limit);
    }
    refineSchema(childSchema) {
        const schema = { ...childSchema, fields: { ...childSchema.fields } };
        for (const [name, computed] of Object.entries(this.computeds)) {
            schema.fields[name] = {
                columnType: computed.columnType,
                defaultValue: computed.defaultValue,
                enumValues: computed.enumValues,
                filterOperators: new Set(),
                isPrimaryKey: false,
                isReadOnly: true,
                isSortable: false,
                type: 'Column',
            };
        }
        return schema;
    }
}
exports.default = ComputedCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL2NvbXB1dGVkL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFheUM7QUFFekMsOEVBQTBEO0FBQzFELHNGQUF3RDtBQUV4RCwwRkFBOEU7QUFFOUUsd0NBQXdDO0FBQ3hDLE1BQXFCLGtCQUFtQixTQUFRLHdDQUFtQjtJQUFuRTs7UUFFWSxjQUFTLEdBQXVDLEVBQUUsQ0FBQztJQWdGL0QsQ0FBQztJQTlFQyxnQkFBZ0I7SUFDaEIsV0FBVyxDQUFDLElBQVk7UUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFOUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQW1CLENBQUM7UUFDN0YsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUVyRSxPQUFPLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsSUFBWSxFQUFFLFFBQTRCO1FBQ3pELG1DQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0Msb0RBQW9EO1FBQ3BELEtBQUssTUFBTSxLQUFLLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRTtZQUN6QyxtQ0FBYyxDQUFDLFFBQVEsQ0FB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