"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eventsource_1 = __importDefault(require("eventsource"));
const types_1 = require("./types");
class EventsSubscriptionService {
    constructor(options, refreshEventsHandlerService) {
        this.options = options;
        this.refreshEventsHandlerService = refreshEventsHandlerService;
    }
    async subscribeEvents() {
        if (!this.options.instantCacheRefresh) {
            this.options.logger('Debug', 'Event source deactivated.. Use agent option [instantCacheRefresh=true] ' +
                'if you want to activate them');
            return;
        }
        const eventSourceConfig = {
            // forest-secret-key act as the credential
            withCredentials: false,
            headers: { 'forest-secret-key': this.options.envSecret },
            https: {
                rejectUnauthorized: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0',
            },
        };
        const url = new URL('/liana/v4/subscribe-to-events', this.options.forestServerUrl).toString();
        const eventSource = new eventsource_1.default(url, eventSourceConfig);
        // Override reconnect interval to 5 seconds
        eventSource.reconnectInterval = 5000;
        eventSource.addEventListener('error', this.onEventError.bind(this));
        // Only listen after first open
        eventSource.once('open', () => eventSource.addEventListener('open', () => this.onEventOpenAgain()));
        eventSource.addEventListener(types_1.ServerEventType.RefreshUsers, async () => this.refreshEventsHandlerService.refreshUsers());
        eventSource.addEventListener(types_1.ServerEventType.RefreshRoles, async () => this.refreshEventsHandlerService.refreshRoles());
        eventSource.addEventListener(types_1.ServerEventType.RefreshRenderings, async (event) => this.handleSeverEventRefreshRenderings(event));
        eventSource.addEventListener(types_1.ServerEventType.RefreshCustomizations, async () => this.refreshEventsHandlerService.refreshCustomizations());
        this.eventSource = eventSource;
    }
    /**
     * Close the current EventSource
     */
    close() {
        this.eventSource?.close();
    }
    async handleSeverEventRefreshRenderings(event) {
        if (!event.data) {
            this.options.logger('Debug', 'Server Event - RefreshRenderings missing required data.');
            return;
        }
        const { renderingIds } = JSON.parse(event.data);
        await this.refreshEventsHandlerService.refreshRenderings(renderingIds);
    }
    onEventError(event) {
        const { status, message } = event;
        if ([502, 503, 504].includes(status)) {
            this.options.logger('Debug', 'Server Event - Connection lost trying to reconnectâ€¦');
            return;
        }
        if (status === 404)
            throw new Error('Forest Admin server failed to find the environment ' +
                'related to the envSecret you configured. ' +
                'Can you check that you copied it properly during initialization?');
        if (message)
            this.options.logger('Warn', `Server Event - Error: ${JSON.stringify(event)}`);
    }
    onEventOpenAgain() {
        this.options.logger('Debug', 'Server Event - Open EventSource (SSE) connection with Forest Admin servers');
        // Flush all previous data as we could have missed some events
        this.refreshEventsHandlerService.refreshEverything();
    }
}
exports.default = EventsSubscriptionService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnRzLXN1YnNjcmlwdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhEQUFzQztBQUV0QyxtQ0FLaUI7QUFHakIsTUFBcUIseUJBQXlCO0lBRzVDLFlBQ21CLE9BQTZDLEVBQzdDLDJCQUF3RDtRQUR4RCxZQUFPLEdBQVAsT0FBTyxDQUFzQztRQUM3QyxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQTZCO0lBQ3hFLENBQUM7SUFFSixLQUFLLENBQUMsZUFBZTtRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRTtZQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FDakIsT0FBTyxFQUNQLHlFQUF5RTtnQkFDdkUsOEJBQThCLENBQ2pDLENBQUM7WUFFRixPQUFPO1NBQ1I7UUFFRCxNQUFNLGlCQUFpQixHQUFHO1lBQ3hCLDBDQUEwQztZQUMxQyxlQUFlLEVBQUUsS0FBSztZQUN0QixPQUFPLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUN4RCxLQUFLLEVBQUU7Z0JBQ0wsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsS0FBSyxHQUFHO2FBQ3JFO1NBQ0YsQ0FBQztRQUNGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLCtCQUErQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFOUYsTUFBTSxXQUFXLEdBQUcsSUFBSSxxQkFBVyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVELDJDQUEyQztRQUMzQyxXQUFXLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBRXJDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFD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